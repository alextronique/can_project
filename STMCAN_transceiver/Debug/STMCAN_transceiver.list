
STMCAN_transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  20000004  08002934  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000168  08002934  00020168  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011fb0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021dc  00000000  00000000  00031fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b48  00000000  00000000  000341c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000588c  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a5b  00000000  00000000  0003b004  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ea5f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002eac  00000000  00000000  0003eadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080028f8 	.word	0x080028f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080028f8 	.word	0x080028f8

08000204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f90b 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f808 	bl	8000248 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000238:	f002 f98b 	bl	8002552 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023c00 	.word	0x40023c00

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <HAL_InitTick+0x30>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <HAL_InitTick+0x34>)
 8000256:	fba2 2303 	umull	r2, r3, r2, r3
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f928 	bl	80004b2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000262:	2200      	movs	r2, #0
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	f04f 30ff 	mov.w	r0, #4294967295
 800026a:	f000 f8f8 	bl	800045e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000
 800027c:	10624dd3 	.word	0x10624dd3

08000280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_IncTick+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	; (8000298 <HAL_IncTick+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	20000024 	.word	0x20000024

0800029c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return uwTick;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <HAL_GetTick+0x14>)
 80002a2:	681b      	ldr	r3, [r3, #0]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000024 	.word	0x20000024

080002b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f003 0307 	and.w	r3, r3, #7
 80002c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <NVIC_SetPriorityGrouping+0x44>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002d0:	4013      	ands	r3, r2
 80002d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <NVIC_SetPriorityGrouping+0x44>)
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	60d3      	str	r3, [r2, #12]
}
 80002ec:	bf00      	nop
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <NVIC_GetPriorityGrouping+0x18>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	0a1b      	lsrs	r3, r3, #8
 8000306:	f003 0307 	and.w	r3, r3, #7
}
 800030a:	4618      	mov	r0, r3
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000322:	4909      	ldr	r1, [pc, #36]	; (8000348 <NVIC_EnableIRQ+0x30>)
 8000324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000328:	095b      	lsrs	r3, r3, #5
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	f002 021f 	and.w	r2, r2, #31
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	da0b      	bge.n	8000378 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	490d      	ldr	r1, [pc, #52]	; (8000398 <NVIC_SetPriority+0x4c>)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 030f 	and.w	r3, r3, #15
 8000368:	3b04      	subs	r3, #4
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000376:	e009      	b.n	800038c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	4908      	ldr	r1, [pc, #32]	; (800039c <NVIC_SetPriority+0x50>)
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	0112      	lsls	r2, r2, #4
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	440b      	add	r3, r1
 8000388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	e000ed00 	.word	0xe000ed00
 800039c:	e000e100 	.word	0xe000e100

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	2201      	movs	r2, #1
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	1e5a      	subs	r2, r3, #1
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	401a      	ands	r2, r3
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e6:	2101      	movs	r1, #1
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	1e59      	subs	r1, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	4313      	orrs	r3, r2
         );
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3724      	adds	r7, #36	; 0x24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f7ff ff90 	bl	800034c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff2f 	bl	80002b4 <NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000470:	f7ff ff44 	bl	80002fc <NVIC_GetPriorityGrouping>
 8000474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ff90 	bl	80003a0 <NVIC_EncodePriority>
 8000480:	4602      	mov	r2, r0
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff5f 	bl	800034c <NVIC_SetPriority>
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff37 	bl	8000318 <NVIC_EnableIRQ>
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ffa2 	bl	8000404 <SysTick_Config>
 80004c0:	4603      	mov	r3, r0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d106      	bne.n	80004e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004da:	4a09      	ldr	r2, [pc, #36]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80004e6:	e005      	b.n	80004f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f023 0304 	bic.w	r3, r3, #4
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000e010 	.word	0xe000e010

08000504 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000508:	f000 f802 	bl	8000510 <HAL_SYSTICK_Callback>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000520:	b480      	push	{r7}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	e165      	b.n	8000808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800053c:	2201      	movs	r2, #1
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	429a      	cmp	r2, r3
 8000556:	f040 8154 	bne.w	8000802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d003      	beq.n	800056a <HAL_GPIO_Init+0x4a>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b12      	cmp	r3, #18
 8000568:	d123      	bne.n	80005b2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	08da      	lsrs	r2, r3, #3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3208      	adds	r2, #8
 8000572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	220f      	movs	r2, #15
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	69ba      	ldr	r2, [r7, #24]
 800058a:	4013      	ands	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	691a      	ldr	r2, [r3, #16]
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	f003 0307 	and.w	r3, r3, #7
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	08da      	lsrs	r2, r3, #3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3208      	adds	r2, #8
 80005ac:	69b9      	ldr	r1, [r7, #24]
 80005ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2203      	movs	r2, #3
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	69ba      	ldr	r2, [r7, #24]
 80005c6:	4013      	ands	r3, r2
 80005c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f003 0203 	and.w	r2, r3, #3
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	4313      	orrs	r3, r2
 80005de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00b      	beq.n	8000606 <HAL_GPIO_Init+0xe6>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005fa:	2b11      	cmp	r3, #17
 80005fc:	d003      	beq.n	8000606 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	2b12      	cmp	r3, #18
 8000604:	d130      	bne.n	8000668 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	2203      	movs	r2, #3
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	69ba      	ldr	r2, [r7, #24]
 800061a:	4013      	ands	r3, r2
 800061c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	68da      	ldr	r2, [r3, #12]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	4313      	orrs	r3, r2
 800062e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	69ba      	ldr	r2, [r7, #24]
 8000634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800063c:	2201      	movs	r2, #1
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	69ba      	ldr	r2, [r7, #24]
 8000648:	4013      	ands	r3, r2
 800064a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	f003 0201 	and.w	r2, r3, #1
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	69ba      	ldr	r2, [r7, #24]
 800065e:	4313      	orrs	r3, r2
 8000660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	2203      	movs	r2, #3
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	69ba      	ldr	r2, [r7, #24]
 800067c:	4013      	ands	r3, r2
 800067e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	4313      	orrs	r3, r2
 8000690:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f000 80ae 	beq.w	8000802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4a5c      	ldr	r2, [pc, #368]	; (800081c <HAL_GPIO_Init+0x2fc>)
 80006ac:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_GPIO_Init+0x2fc>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b59      	ldr	r3, [pc, #356]	; (800081c <HAL_GPIO_Init+0x2fc>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80006c2:	4a57      	ldr	r2, [pc, #348]	; (8000820 <HAL_GPIO_Init+0x300>)
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	3302      	adds	r3, #2
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	220f      	movs	r2, #15
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	4013      	ands	r3, r2
 80006e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a4e      	ldr	r2, [pc, #312]	; (8000824 <HAL_GPIO_Init+0x304>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d025      	beq.n	800073a <HAL_GPIO_Init+0x21a>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a4d      	ldr	r2, [pc, #308]	; (8000828 <HAL_GPIO_Init+0x308>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d01f      	beq.n	8000736 <HAL_GPIO_Init+0x216>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a4c      	ldr	r2, [pc, #304]	; (800082c <HAL_GPIO_Init+0x30c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d019      	beq.n	8000732 <HAL_GPIO_Init+0x212>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a4b      	ldr	r2, [pc, #300]	; (8000830 <HAL_GPIO_Init+0x310>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d013      	beq.n	800072e <HAL_GPIO_Init+0x20e>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a4a      	ldr	r2, [pc, #296]	; (8000834 <HAL_GPIO_Init+0x314>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d00d      	beq.n	800072a <HAL_GPIO_Init+0x20a>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a49      	ldr	r2, [pc, #292]	; (8000838 <HAL_GPIO_Init+0x318>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d007      	beq.n	8000726 <HAL_GPIO_Init+0x206>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a48      	ldr	r2, [pc, #288]	; (800083c <HAL_GPIO_Init+0x31c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <HAL_GPIO_Init+0x202>
 800071e:	2306      	movs	r3, #6
 8000720:	e00c      	b.n	800073c <HAL_GPIO_Init+0x21c>
 8000722:	2307      	movs	r3, #7
 8000724:	e00a      	b.n	800073c <HAL_GPIO_Init+0x21c>
 8000726:	2305      	movs	r3, #5
 8000728:	e008      	b.n	800073c <HAL_GPIO_Init+0x21c>
 800072a:	2304      	movs	r3, #4
 800072c:	e006      	b.n	800073c <HAL_GPIO_Init+0x21c>
 800072e:	2303      	movs	r3, #3
 8000730:	e004      	b.n	800073c <HAL_GPIO_Init+0x21c>
 8000732:	2302      	movs	r3, #2
 8000734:	e002      	b.n	800073c <HAL_GPIO_Init+0x21c>
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <HAL_GPIO_Init+0x21c>
 800073a:	2300      	movs	r3, #0
 800073c:	69fa      	ldr	r2, [r7, #28]
 800073e:	f002 0203 	and.w	r2, r2, #3
 8000742:	0092      	lsls	r2, r2, #2
 8000744:	4093      	lsls	r3, r2
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	4313      	orrs	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800074c:	4934      	ldr	r1, [pc, #208]	; (8000820 <HAL_GPIO_Init+0x300>)
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	089b      	lsrs	r3, r3, #2
 8000752:	3302      	adds	r3, #2
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <HAL_GPIO_Init+0x320>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	43db      	mvns	r3, r3
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	4013      	ands	r3, r2
 8000768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	4313      	orrs	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800077e:	4a30      	ldr	r2, [pc, #192]	; (8000840 <HAL_GPIO_Init+0x320>)
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000784:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <HAL_GPIO_Init+0x320>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	43db      	mvns	r3, r3
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	4013      	ands	r3, r2
 8000792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d003      	beq.n	80007a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <HAL_GPIO_Init+0x320>)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <HAL_GPIO_Init+0x320>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	43db      	mvns	r3, r3
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	4013      	ands	r3, r2
 80007bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <HAL_GPIO_Init+0x320>)
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_GPIO_Init+0x320>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	4013      	ands	r3, r2
 80007e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_GPIO_Init+0x320>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3301      	adds	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	2b0f      	cmp	r3, #15
 800080c:	f67f ae96 	bls.w	800053c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000810:	bf00      	nop
 8000812:	3724      	adds	r7, #36	; 0x24
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023800 	.word	0x40023800
 8000820:	40013800 	.word	0x40013800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800
 8000840:	40013c00 	.word	0x40013c00

08000844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691a      	ldr	r2, [r3, #16]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	4013      	ands	r3, r2
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e001      	b.n	8000866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
 8000880:	4613      	mov	r3, r2
 8000882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000884:	787b      	ldrb	r3, [r7, #1]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800088a:	887a      	ldrh	r2, [r7, #2]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000890:	e003      	b.n	800089a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	041a      	lsls	r2, r3, #16
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	619a      	str	r2, [r3, #24]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	405a      	eors	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	615a      	str	r2, [r3, #20]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4013      	ands	r3, r2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f806 	bl	80008fc <HAL_GPIO_EXTI_Callback>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013c00 	.word	0x40013c00

080008fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <HAL_PWREx_EnableOverDrive+0xcc>)
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_PWREx_EnableOverDrive+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <HAL_PWREx_EnableOverDrive+0xcc>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093e:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	fa93 f3a3 	rbit	r3, r3
 8000946:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000948:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000952:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	461a      	mov	r2, r3
 800095a:	2301      	movs	r3, #1
 800095c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800095e:	f7ff fc9d 	bl	800029c <HAL_GetTick>
 8000962:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000964:	e009      	b.n	800097a <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000966:	f7ff fc99 	bl	800029c <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000974:	d901      	bls.n	800097a <HAL_PWREx_EnableOverDrive+0x66>
    {
      return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e02e      	b.n	80009d8 <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_PWREx_EnableOverDrive+0xd0>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000986:	d1ee      	bne.n	8000966 <HAL_PWREx_EnableOverDrive+0x52>
 8000988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	fa93 f3a3 	rbit	r3, r3
 8000994:	607b      	str	r3, [r7, #4]
  return(result);
 8000996:	687b      	ldr	r3, [r7, #4]
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009a0:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	461a      	mov	r2, r3
 80009a8:	2301      	movs	r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ac:	f7ff fc76 	bl	800029c <HAL_GetTick>
 80009b0:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009b2:	e009      	b.n	80009c8 <HAL_PWREx_EnableOverDrive+0xb4>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009b4:	f7ff fc72 	bl	800029c <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009c2:	d901      	bls.n	80009c8 <HAL_PWREx_EnableOverDrive+0xb4>
    {
      return HAL_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	e007      	b.n	80009d8 <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_PWREx_EnableOverDrive+0xd0>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009d4:	d1ee      	bne.n	80009b4 <HAL_PWREx_EnableOverDrive+0xa0>
    }
  } 
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f6:	4b81      	ldr	r3, [pc, #516]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 020f 	and.w	r2, r3, #15
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d20c      	bcs.n	8000a1e <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 020f 	and.w	r2, r3, #15
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d001      	beq.n	8000a1e <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e0ea      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a2a:	4975      	ldr	r1, [pc, #468]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a2c:	4b74      	ldr	r3, [pc, #464]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f000 8086 	beq.w	8000b56 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d107      	bne.n	8000a62 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a52:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d119      	bne.n	8000a92 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e0c8      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d003      	beq.n	8000a72 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d107      	bne.n	8000a82 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a72:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d109      	bne.n	8000a92 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e0b8      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a82:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e0b0      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a92:	495b      	ldr	r1, [pc, #364]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a94:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 0203 	bic.w	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fbfa 	bl	800029c <HAL_GetTick>
 8000aa8:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d112      	bne.n	8000ad8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab2:	e00a      	b.n	8000aca <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ab4:	f7ff fbf2 	bl	800029c <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e094      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aca:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d1ee      	bne.n	8000ab4 <HAL_RCC_ClockConfig+0xcc>
 8000ad6:	e03e      	b.n	8000b56 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d112      	bne.n	8000b06 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae0:	e00a      	b.n	8000af8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae2:	f7ff fbdb 	bl	800029c <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d901      	bls.n	8000af8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e07d      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d1ee      	bne.n	8000ae2 <HAL_RCC_ClockConfig+0xfa>
 8000b04:	e027      	b.n	8000b56 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d11d      	bne.n	8000b4a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000b0e:	e00a      	b.n	8000b26 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b10:	f7ff fbc4 	bl	800029c <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e066      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	2b0c      	cmp	r3, #12
 8000b30:	d1ee      	bne.n	8000b10 <HAL_RCC_ClockConfig+0x128>
 8000b32:	e010      	b.n	8000b56 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b34:	f7ff fbb2 	bl	800029c <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e054      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1ee      	bne.n	8000b34 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 020f 	and.w	r2, r3, #15
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d90c      	bls.n	8000b7e <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_RCC_ClockConfig+0x214>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 020f 	and.w	r2, r3, #15
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d001      	beq.n	8000b7e <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e03a      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d008      	beq.n	8000b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b8a:	491d      	ldr	r1, [pc, #116]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d009      	beq.n	8000bbc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ba8:	4915      	ldr	r1, [pc, #84]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000bbc:	f000 f876 	bl	8000cac <HAL_RCC_GetSysClockFreq>
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_RCC_ClockConfig+0x218>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000bca:	23f0      	movs	r3, #240	; 0xf0
 8000bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	fab3 f383 	clz	r3, r3
 8000bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_RCC_ClockConfig+0x21c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	fa21 f303 	lsr.w	r3, r1, r3
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_RCC_ClockConfig+0x220>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fb2b 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023c00 	.word	0x40023c00
 8000c00:	40023800 	.word	0x40023800
 8000c04:	08002910 	.word	0x08002910
 8000c08:	20000000 	.word	0x20000000

08000c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000

08000c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000c2a:	f7ff ffef 	bl	8000c0c <HAL_RCC_GetHCLKFreq>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000c38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c3c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	603b      	str	r3, [r7, #0]
  return(result);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	08002920 	.word	0x08002920

08000c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000c6e:	f7ff ffcd 	bl	8000c0c <HAL_RCC_GetHCLKFreq>
 8000c72:	4601      	mov	r1, r0
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8000c7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c80:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	603b      	str	r3, [r7, #0]
  return(result);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	08002920 	.word	0x08002920

08000cac <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b093      	sub	sp, #76	; 0x4c
 8000cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllvco = 0U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllp = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pllr = 0U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cc6:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	f200 80c8 	bhi.w	8000e64 <HAL_RCC_GetSysClockFreq+0x1b8>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <HAL_RCC_GetSysClockFreq+0x30>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000e65 	.word	0x08000e65
 8000ce4:	08000e65 	.word	0x08000e65
 8000ce8:	08000e65 	.word	0x08000e65
 8000cec:	08000d17 	.word	0x08000d17
 8000cf0:	08000e65 	.word	0x08000e65
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000e65 	.word	0x08000e65
 8000cfc:	08000d1d 	.word	0x08000d1d
 8000d00:	08000e65 	.word	0x08000e65
 8000d04:	08000e65 	.word	0x08000e65
 8000d08:	08000e65 	.word	0x08000e65
 8000d0c:	08000dc3 	.word	0x08000dc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d10:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
       break;
 8000d14:	e0a9      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d16:	4b5a      	ldr	r3, [pc, #360]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8000d18:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8000d1a:	e0a6      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d1c:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d017      	beq.n	8000d62 <HAL_RCC_GetSysClockFreq+0xb6>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000d32:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8000d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d36:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000d3c:	6859      	ldr	r1, [r3, #4]
 8000d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d42:	400b      	ands	r3, r1
 8000d44:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000d48:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d4c:	fa91 f1a1 	rbit	r1, r1
 8000d50:	62f9      	str	r1, [r7, #44]	; 0x2c
  return(result);
 8000d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d54:	fab1 f181 	clz	r1, r1
 8000d58:	40cb      	lsrs	r3, r1
 8000d5a:	fb03 f302 	mul.w	r3, r3, r2
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d60:	e016      	b.n	8000d90 <HAL_RCC_GetSysClockFreq+0xe4>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000d62:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8000d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000d6c:	6859      	ldr	r1, [r3, #4]
 8000d6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d72:	400b      	ands	r3, r1
 8000d74:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000d78:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d7c:	fa91 f1a1 	rbit	r1, r1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
  return(result);
 8000d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d84:	fab1 f181 	clz	r1, r1
 8000d88:	40cb      	lsrs	r3, r1
 8000d8a:	fb03 f302 	mul.w	r3, r3, r2
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000d98:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	61fb      	str	r3, [r7, #28]
  return(result);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
      
      sysclockfreq = pllvco/pllp;
 8000db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8000dc0:	e053      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d017      	beq.n	8000e08 <HAL_RCC_GetSysClockFreq+0x15c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8000dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000de8:	400b      	ands	r3, r1
 8000dea:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000dee:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	fa91 f1a1 	rbit	r1, r1
 8000df6:	6179      	str	r1, [r7, #20]
  return(result);
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	fab1 f181 	clz	r1, r1
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	fb03 f302 	mul.w	r3, r3, r2
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
 8000e06:	e016      	b.n	8000e36 <HAL_RCC_GetSysClockFreq+0x18a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8000e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e18:	400b      	ands	r3, r1
 8000e1a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000e1e:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	6939      	ldr	r1, [r7, #16]
 8000e22:	fa91 f1a1 	rbit	r1, r1
 8000e26:	60f9      	str	r1, [r7, #12]
  return(result);
 8000e28:	68f9      	ldr	r1, [r7, #12]
 8000e2a:	fab1 f181 	clz	r1, r1
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	fb03 f302 	mul.w	r3, r3, r2
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8000e3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8000e42:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	607b      	str	r3, [r7, #4]
  return(result);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
      
      sysclockfreq = pllvco/pllr;
 8000e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8000e62:	e002      	b.n	8000e6a <HAL_RCC_GetSysClockFreq+0x1be>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8000e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	374c      	adds	r7, #76	; 0x4c
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	00f42400 	.word	0x00f42400
 8000e80:	007a1200 	.word	0x007a1200

08000e84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b090      	sub	sp, #64	; 0x40
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8083 	beq.w	8000fa4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e9e:	4b9f      	ldr	r3, [pc, #636]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d019      	beq.n	8000ede <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000eaa:	4b9c      	ldr	r3, [pc, #624]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d106      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000eb6:	4b99      	ldr	r3, [pc, #612]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec4:	4b95      	ldr	r3, [pc, #596]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed0:	4b92      	ldr	r3, [pc, #584]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b8f      	ldr	r3, [pc, #572]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d05b      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x11e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d157      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e23e      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x8a>
 8000f00:	4a86      	ldr	r2, [pc, #536]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f02:	4b86      	ldr	r3, [pc, #536]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e01d      	b.n	8000f4a <HAL_RCC_OscConfig+0xc6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0xae>
 8000f18:	4a80      	ldr	r2, [pc, #512]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f1a:	4b80      	ldr	r3, [pc, #512]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4a7d      	ldr	r2, [pc, #500]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f26:	4b7d      	ldr	r3, [pc, #500]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0xc6>
 8000f32:	4a7a      	ldr	r2, [pc, #488]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f34:	4b79      	ldr	r3, [pc, #484]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4a77      	ldr	r2, [pc, #476]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f40:	4b76      	ldr	r3, [pc, #472]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d013      	beq.n	8000f7a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff f9a3 	bl	800029c <HAL_GetTick>
 8000f56:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff f99f 	bl	800029c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e203      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0xd6>
 8000f78:	e014      	b.n	8000fa4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7a:	f7ff f98f 	bl	800029c <HAL_GetTick>
 8000f7e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f82:	f7ff f98b 	bl	800029c <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b64      	cmp	r3, #100	; 0x64
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e1ef      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f94:	4b61      	ldr	r3, [pc, #388]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0xfe>
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <HAL_RCC_OscConfig+0x236>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d017      	beq.n	8000fee <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d105      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fd6:	4b51      	ldr	r3, [pc, #324]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fde:	2b0c      	cmp	r3, #12
 8000fe0:	d126      	bne.n	8001030 <HAL_RCC_OscConfig+0x1ac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d120      	bne.n	8001030 <HAL_RCC_OscConfig+0x1ac>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x182>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1b6      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4845      	ldr	r0, [pc, #276]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_RCC_OscConfig+0x298>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	23f8      	movs	r3, #248	; 0xf8
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e044      	b.n	80010ba <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02a      	beq.n	800108e <HAL_RCC_OscConfig+0x20a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_RCC_OscConfig+0x29c>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff f92d 	bl	800029c <HAL_GetTick>
 8001042:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x1d4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff f929 	bl	800029c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x1d4>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e18d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_RCC_OscConfig+0x298>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x1c2>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_RCC_OscConfig+0x298>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6919      	ldr	r1, [r3, #16]
 8001072:	23f8      	movs	r3, #248	; 0xf8
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	6003      	str	r3, [r0, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108e:	4b24      	ldr	r3, [pc, #144]	; (8001120 <HAL_RCC_OscConfig+0x29c>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff f902 	bl	800029c <HAL_GetTick>
 8001098:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff f8fe 	bl	800029c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e162      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_OscConfig+0x298>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d036      	beq.n	8001134 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d016      	beq.n	80010fc <HAL_RCC_OscConfig+0x278>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_RCC_OscConfig+0x2a0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d4:	f7ff f8e2 	bl	800029c <HAL_GetTick>
 80010d8:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x26a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff f8de 	bl	800029c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e142      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_RCC_OscConfig+0x298>)
 80010f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x258>
 80010fa:	e01b      	b.n	8001134 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_RCC_OscConfig+0x2a0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001102:	f7ff f8cb 	bl	800029c <HAL_GetTick>
 8001106:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	e00e      	b.n	8001128 <HAL_RCC_OscConfig+0x2a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff f8c7 	bl	800029c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d907      	bls.n	8001128 <HAL_RCC_OscConfig+0x2a4>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e12b      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
 800111c:	40023800 	.word	0x40023800
 8001120:	42470000 	.word	0x42470000
 8001124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001128:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 800112a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ea      	bne.n	800110a <HAL_RCC_OscConfig+0x286>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d07d      	beq.n	800123c <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4a8d      	ldr	r2, [pc, #564]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001146:	4b8d      	ldr	r3, [pc, #564]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b8a      	ldr	r3, [pc, #552]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800115c:	4a88      	ldr	r2, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x4fc>)
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x4fc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001168:	f7ff f898 	bl	800029c <HAL_GetTick>
 800116c:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x2fe>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001170:	f7ff f894 	bl	800029c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x2fe>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e0f8      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001182:	4b7f      	ldr	r3, [pc, #508]	; (8001380 <HAL_RCC_OscConfig+0x4fc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x2ec>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d106      	bne.n	80011a4 <HAL_RCC_OscConfig+0x320>
 8001196:	4a79      	ldr	r2, [pc, #484]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001198:	4b78      	ldr	r3, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6713      	str	r3, [r2, #112]	; 0x70
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x35a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x342>
 80011ac:	4a73      	ldr	r2, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6713      	str	r3, [r2, #112]	; 0x70
 80011b8:	4a70      	ldr	r2, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6713      	str	r3, [r2, #112]	; 0x70
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x35a>
 80011c6:	4a6d      	ldr	r2, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6713      	str	r3, [r2, #112]	; 0x70
 80011d2:	4a6a      	ldr	r2, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	4b69      	ldr	r3, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e6:	f7ff f859 	bl	800029c <HAL_GetTick>
 80011ea:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff f855 	bl	800029c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0b7      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x36a>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff f843 	bl	800029c <HAL_GetTick>
 8001216:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3ac>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff f83f 	bl	800029c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0a1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b52      	ldr	r3, [pc, #328]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x396>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8096 	beq.w	8001372 <HAL_RCC_OscConfig+0x4ee>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001246:	4b4d      	ldr	r3, [pc, #308]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b08      	cmp	r3, #8
 8001250:	f000 808d 	beq.w	800136e <HAL_RCC_OscConfig+0x4ea>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d171      	bne.n	8001340 <HAL_RCC_OscConfig+0x4bc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_RCC_OscConfig+0x500>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff f81b 	bl	800029c <HAL_GetTick>
 8001266:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x3f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff f817 	bl	800029c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e07b      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x3e6>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001288:	483c      	ldr	r0, [pc, #240]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800129c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	1e59      	subs	r1, r3, #1
 80012ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	617b      	str	r3, [r7, #20]
  return(result);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80012dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_RCC_OscConfig+0x500>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7fe ffc0 	bl	800029c <HAL_GetTick>
 800131c:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001320:	f7fe ffbc 	bl	800029c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4ae>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e020      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x49c>
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x4ee>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_RCC_OscConfig+0x500>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7fe ffa9 	bl	800029c <HAL_GetTick>
 800134a:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x4dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7fe ffa5 	bl	800029c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x4dc>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e009      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_RCC_OscConfig+0x4f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x4ca>
 800136c:	e001      	b.n	8001372 <HAL_RCC_OscConfig+0x4ee>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4f0>
    }
  }
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3740      	adds	r7, #64	; 0x40
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
 8001384:	42470060 	.word	0x42470060

08001388 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e01d      	b.n	80013d6 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f001 f908 	bl	80025c4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f000 fa94 	bl	80018f4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_TIM_Base_DeInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{  
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   
  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <HAL_TIM_Base_DeInit+0x40>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	f240 4344 	movw	r3, #1092	; 0x444
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d107      	bne.n	800141e <HAL_TIM_Base_DeInit+0x40>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
    
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 f906 	bl	8002630 <HAL_TIM_Base_MspDeInit>
  
  /* Change TIM state */  
  htim->State = HAL_TIM_STATE_RESET; 
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Release Lock */
  __HAL_UNLOCK(htim);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	68d2      	ldr	r2, [r2, #12]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_TIM_Base_Stop_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	68d2      	ldr	r2, [r2, #12]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	f241 1311 	movw	r3, #4369	; 0x1111
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10f      	bne.n	80014bc <HAL_TIM_Base_Stop_IT+0x48>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a1a      	ldr	r2, [r3, #32]
 80014a2:	f240 4344 	movw	r3, #1092	; 0x444
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_TIM_Base_Stop_IT+0x48>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d122      	bne.n	8001526 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d11b      	bne.n	8001526 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f06f 0202 	mvn.w	r2, #2
 80014f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f9d3 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8001512:	e005      	b.n	8001520 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f9c5 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f9d6 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b04      	cmp	r3, #4
 8001532:	d122      	bne.n	800157a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d11b      	bne.n	800157a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f06f 0204 	mvn.w	r2, #4
 800154a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f9a9 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 8001566:	e005      	b.n	8001574 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f99b 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f9ac 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b08      	cmp	r3, #8
 8001586:	d122      	bne.n	80015ce <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11b      	bne.n	80015ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f06f 0208 	mvn.w	r2, #8
 800159e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2204      	movs	r2, #4
 80015a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f97f 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 80015ba:	e005      	b.n	80015c8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f971 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f982 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d122      	bne.n	8001622 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d11b      	bne.n	8001622 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f06f 0210 	mvn.w	r2, #16
 80015f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2208      	movs	r2, #8
 80015f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f955 	bl	80018b8 <HAL_TIM_IC_CaptureCallback>
 800160e:	e005      	b.n	800161c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f947 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f958 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10e      	bne.n	800164e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f06f 0201 	mvn.w	r2, #1
 8001646:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f921 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001658:	2b80      	cmp	r3, #128	; 0x80
 800165a:	d10e      	bne.n	800167a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b80      	cmp	r3, #128	; 0x80
 8001668:	d107      	bne.n	800167a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001672:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fadf 	bl	8001c38 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001684:	2b40      	cmp	r3, #64	; 0x40
 8001686:	d10e      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d107      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800169e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f91d 	bl	80018e0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d10e      	bne.n	80016d2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d107      	bne.n	80016d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0220 	mvn.w	r2, #32
 80016ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 faa9 	bl	8001c24 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_ConfigClockSource+0x1c>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e0c8      	b.n	8001888 <HAL_TIM_ConfigClockSource+0x1ae>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001714:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800171c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d077      	beq.n	800181e <HAL_TIM_ConfigClockSource+0x144>
 800172e:	2b40      	cmp	r3, #64	; 0x40
 8001730:	d80e      	bhi.n	8001750 <HAL_TIM_ConfigClockSource+0x76>
 8001732:	2b10      	cmp	r3, #16
 8001734:	f000 808a 	beq.w	800184c <HAL_TIM_ConfigClockSource+0x172>
 8001738:	2b10      	cmp	r3, #16
 800173a:	d802      	bhi.n	8001742 <HAL_TIM_ConfigClockSource+0x68>
 800173c:	2b00      	cmp	r3, #0
 800173e:	d07e      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8001740:	e099      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001742:	2b20      	cmp	r3, #32
 8001744:	f000 8089 	beq.w	800185a <HAL_TIM_ConfigClockSource+0x180>
 8001748:	2b30      	cmp	r3, #48	; 0x30
 800174a:	f000 808d 	beq.w	8001868 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 800174e:	e092      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001750:	2b70      	cmp	r3, #112	; 0x70
 8001752:	d016      	beq.n	8001782 <HAL_TIM_ConfigClockSource+0xa8>
 8001754:	2b70      	cmp	r3, #112	; 0x70
 8001756:	d804      	bhi.n	8001762 <HAL_TIM_ConfigClockSource+0x88>
 8001758:	2b50      	cmp	r3, #80	; 0x50
 800175a:	d040      	beq.n	80017de <HAL_TIM_ConfigClockSource+0x104>
 800175c:	2b60      	cmp	r3, #96	; 0x60
 800175e:	d04e      	beq.n	80017fe <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8001760:	e089      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001766:	d003      	beq.n	8001770 <HAL_TIM_ConfigClockSource+0x96>
 8001768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800176c:	d024      	beq.n	80017b8 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 800176e:	e082      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	6892      	ldr	r2, [r2, #8]
 800177a:	f022 0207 	bic.w	r2, r2, #7
 800177e:	609a      	str	r2, [r3, #8]
    break;
 8001780:	e079      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f000 f9e0 	bl	8001b56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80017a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80017ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	609a      	str	r2, [r3, #8]
    break;
 80017b6:	e05e      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f000 f9c5 	bl	8001b56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	6892      	ldr	r2, [r2, #8]
 80017d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017da:	609a      	str	r2, [r3, #8]
    break;
 80017dc:	e04b      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	461a      	mov	r2, r3
 80017ec:	f000 f92c 	bl	8001a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2150      	movs	r1, #80	; 0x50
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f98d 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 80017fc:	e03b      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	461a      	mov	r2, r3
 800180c:	f000 f94f 	bl	8001aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2160      	movs	r1, #96	; 0x60
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f97d 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 800181c:	e02b      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	461a      	mov	r2, r3
 800182c:	f000 f90c 	bl	8001a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f96d 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 800183c:	e01b      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f966 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 800184a:	e014      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2110      	movs	r1, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f95f 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 8001858:	e00d      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2120      	movs	r1, #32
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f958 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 8001866:	e006      	b.n	8001876 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2130      	movs	r1, #48	; 0x30
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f951 	bl	8001b16 <TIM_ITRx_SetConfig>
    break;
 8001874:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <TIM_Base_SetConfig+0x128>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <TIM_Base_SetConfig+0x44>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001916:	d00f      	beq.n	8001938 <TIM_Base_SetConfig+0x44>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a41      	ldr	r2, [pc, #260]	; (8001a20 <TIM_Base_SetConfig+0x12c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00b      	beq.n	8001938 <TIM_Base_SetConfig+0x44>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a40      	ldr	r2, [pc, #256]	; (8001a24 <TIM_Base_SetConfig+0x130>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <TIM_Base_SetConfig+0x44>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3f      	ldr	r2, [pc, #252]	; (8001a28 <TIM_Base_SetConfig+0x134>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d003      	beq.n	8001938 <TIM_Base_SetConfig+0x44>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3e      	ldr	r2, [pc, #248]	; (8001a2c <TIM_Base_SetConfig+0x138>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <TIM_Base_SetConfig+0x48>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <TIM_Base_SetConfig+0x4a>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <TIM_Base_SetConfig+0x128>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d02b      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001962:	d027      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <TIM_Base_SetConfig+0x12c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d023      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <TIM_Base_SetConfig+0x130>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d01f      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <TIM_Base_SetConfig+0x134>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d01b      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <TIM_Base_SetConfig+0x138>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d017      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <TIM_Base_SetConfig+0x13c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d013      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <TIM_Base_SetConfig+0x140>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00f      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <TIM_Base_SetConfig+0x144>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00b      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <TIM_Base_SetConfig+0x148>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <TIM_Base_SetConfig+0x14c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <TIM_Base_SetConfig+0xc0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <TIM_Base_SetConfig+0x150>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <TIM_Base_SetConfig+0xc4>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <TIM_Base_SetConfig+0xc6>
 80019b8:	2300      	movs	r3, #0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <TIM_Base_SetConfig+0x128>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d003      	beq.n	80019f6 <TIM_Base_SetConfig+0x102>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <TIM_Base_SetConfig+0x138>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <TIM_Base_SetConfig+0x106>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <TIM_Base_SetConfig+0x108>
 80019fa:	2300      	movs	r3, #0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	615a      	str	r2, [r3, #20]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40000c00 	.word	0x40000c00
 8001a2c:	40010400 	.word	0x40010400
 8001a30:	40014000 	.word	0x40014000
 8001a34:	40014400 	.word	0x40014400
 8001a38:	40014800 	.word	0x40014800
 8001a3c:	40001800 	.word	0x40001800
 8001a40:	40001c00 	.word	0x40001c00
 8001a44:	40002000 	.word	0x40002000

08001a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f023 0201 	bic.w	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f023 030a 	bic.w	r3, r3, #10
 8001a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	621a      	str	r2, [r3, #32]
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f023 0210 	bic.w	r2, r3, #16
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	031b      	lsls	r3, r3, #12
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	621a      	str	r2, [r3, #32]
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	f043 0307 	orr.w	r3, r3, #7
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	609a      	str	r2, [r3, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b087      	sub	sp, #28
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	021a      	lsls	r2, r3, #8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	609a      	str	r2, [r3, #8]
} 
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e032      	b.n	8001c18 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	6852      	ldr	r2, [r2, #4]
 8001bcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bd0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	6851      	ldr	r1, [r2, #4]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6892      	ldr	r2, [r2, #8]
 8001bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6891      	ldr	r1, [r2, #8]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	6852      	ldr	r2, [r2, #4]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
} 
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e03f      	b.n	8001cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fd02 	bl	800267c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f829 	bl	8001ce8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	6912      	ldr	r2, [r2, #16]
 8001ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	6952      	ldr	r2, [r2, #20]
 8001cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	68d2      	ldr	r2, [r2, #12]
 8001cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d24:	f023 030c 	bic.w	r3, r3, #12
 8001d28:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d78:	f040 80e4 	bne.w	8001f44 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4aab      	ldr	r2, [pc, #684]	; (8002030 <UART_SetConfig+0x348>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <UART_SetConfig+0xa8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4aaa      	ldr	r2, [pc, #680]	; (8002034 <UART_SetConfig+0x34c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d16c      	bne.n	8001e6a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	f7fe ff68 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	009a      	lsls	r2, r3, #2
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4aa2      	ldr	r2, [pc, #648]	; (8002038 <UART_SetConfig+0x350>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	011d      	lsls	r5, r3, #4
 8001db8:	f7fe ff56 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009a      	lsls	r2, r3, #2
 8001dc6:	441a      	add	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8001dd2:	f7fe ff49 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	441a      	add	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	4a92      	ldr	r2, [pc, #584]	; (8002038 <UART_SetConfig+0x350>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2264      	movs	r2, #100	; 0x64
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	1af3      	subs	r3, r6, r3
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	3332      	adds	r3, #50	; 0x32
 8001e00:	4a8d      	ldr	r2, [pc, #564]	; (8002038 <UART_SetConfig+0x350>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e0e:	441d      	add	r5, r3
 8001e10:	f7fe ff2a 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009a      	lsls	r2, r3, #2
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb2 f6f3 	udiv	r6, r2, r3
 8001e2a:	f7fe ff1d 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	441a      	add	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	4a7c      	ldr	r2, [pc, #496]	; (8002038 <UART_SetConfig+0x350>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2264      	movs	r2, #100	; 0x64
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	1af3      	subs	r3, r6, r3
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	3332      	adds	r3, #50	; 0x32
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <UART_SetConfig+0x350>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	442b      	add	r3, r5
 8001e66:	60a3      	str	r3, [r4, #8]
 8001e68:	e154      	b.n	8002114 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681c      	ldr	r4, [r3, #0]
 8001e6e:	f7fe fed9 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	4a6b      	ldr	r2, [pc, #428]	; (8002038 <UART_SetConfig+0x350>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	011d      	lsls	r5, r3, #4
 8001e92:	f7fe fec7 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009a      	lsls	r2, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fbb2 f6f3 	udiv	r6, r2, r3
 8001eac:	f7fe feba 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	441a      	add	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <UART_SetConfig+0x350>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	2264      	movs	r2, #100	; 0x64
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	1af3      	subs	r3, r6, r3
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	3332      	adds	r3, #50	; 0x32
 8001eda:	4a57      	ldr	r2, [pc, #348]	; (8002038 <UART_SetConfig+0x350>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ee8:	441d      	add	r5, r3
 8001eea:	f7fe fe9b 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009a      	lsls	r2, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f04:	f7fe fe8e 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <UART_SetConfig+0x350>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	2264      	movs	r2, #100	; 0x64
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	1af3      	subs	r3, r6, r3
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	3332      	adds	r3, #50	; 0x32
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <UART_SetConfig+0x350>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	442b      	add	r3, r5
 8001f40:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001f42:	e0e7      	b.n	8002114 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <UART_SetConfig+0x348>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <UART_SetConfig+0x270>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a38      	ldr	r2, [pc, #224]	; (8002034 <UART_SetConfig+0x34c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d171      	bne.n	800203c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	f7fe fe84 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4a30      	ldr	r2, [pc, #192]	; (8002038 <UART_SetConfig+0x350>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	011d      	lsls	r5, r3, #4
 8001f80:	f7fe fe72 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f9a:	f7fe fe65 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <UART_SetConfig+0x350>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2264      	movs	r2, #100	; 0x64
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	1af3      	subs	r3, r6, r3
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	3332      	adds	r3, #50	; 0x32
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <UART_SetConfig+0x350>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	441d      	add	r5, r3
 8001fd6:	f7fe fe47 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8001ff0:	f7fe fe3a 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	441a      	add	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <UART_SetConfig+0x350>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	2264      	movs	r2, #100	; 0x64
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	1af3      	subs	r3, r6, r3
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	3332      	adds	r3, #50	; 0x32
 800201e:	4a06      	ldr	r2, [pc, #24]	; (8002038 <UART_SetConfig+0x350>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	442b      	add	r3, r5
 800202c:	60a3      	str	r3, [r4, #8]
 800202e:	e071      	b.n	8002114 <UART_SetConfig+0x42c>
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	f7fe fdf0 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8002044:	4602      	mov	r2, r0
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4a30      	ldr	r2, [pc, #192]	; (800211c <UART_SetConfig+0x434>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	011d      	lsls	r5, r3, #4
 8002064:	f7fe fdde 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8002068:	4602      	mov	r2, r0
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	fbb2 f6f3 	udiv	r6, r2, r3
 800207e:	f7fe fdd1 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8002082:	4602      	mov	r2, r0
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009a      	lsls	r2, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	4a20      	ldr	r2, [pc, #128]	; (800211c <UART_SetConfig+0x434>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2264      	movs	r2, #100	; 0x64
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	1af3      	subs	r3, r6, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	3332      	adds	r3, #50	; 0x32
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <UART_SetConfig+0x434>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b8:	441d      	add	r5, r3
 80020ba:	f7fe fdb3 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 80020be:	4602      	mov	r2, r0
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009a      	lsls	r2, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80020d4:	f7fe fda6 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <UART_SetConfig+0x434>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2264      	movs	r2, #100	; 0x64
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	1af3      	subs	r3, r6, r3
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	3332      	adds	r3, #50	; 0x32
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <UART_SetConfig+0x434>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	442b      	add	r3, r5
 8002110:	60a3      	str	r3, [r4, #8]
}
 8002112:	e7ff      	b.n	8002114 <UART_SetConfig+0x42c>
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	51eb851f 	.word	0x51eb851f

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002124:	f7fe f86e 	bl	8000204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002128:	f000 f84c 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212c:	f000 f988 	bl	8002440 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002130:	f000 f8ca 	bl	80022c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002134:	f000 f95a 	bl	80023ec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002138:	f000 f90e 	bl	8002358 <MX_TIM3_Init>
  NVIC_Init();
 800213c:	f000 f81e 	bl	800217c <NVIC_Init>

  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Stop_IT(&htim3);
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <main+0x50>)
 8002142:	f7ff f997 	bl	8001474 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_DeInit(&htim3);
 8002146:	480a      	ldr	r0, [pc, #40]	; (8002170 <main+0x50>)
 8002148:	f7ff f949 	bl	80013de <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_Init(&htim3);
 800214c:	4808      	ldr	r0, [pc, #32]	; (8002170 <main+0x50>)
 800214e:	f7ff f91b 	bl	8001388 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <main+0x50>)
 8002154:	f7ff f973 	bl	800143e <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 if (flagTIM3 == 1)
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <main+0x54>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d1fb      	bne.n	8002158 <main+0x38>
	  {
	  	 flagTIM3 = 0;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <main+0x54>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_TogglePin(Output_GPIO_Port, Output_Pin);
 8002166:	2120      	movs	r1, #32
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <main+0x58>)
 800216a:	f7fe fb9c 	bl	80008a6 <HAL_GPIO_TogglePin>
	 if (flagTIM3 == 1)
 800216e:	e7f3      	b.n	8002158 <main+0x38>
 8002170:	20000028 	.word	0x20000028
 8002174:	20000022 	.word	0x20000022
 8002178:	40020800 	.word	0x40020800

0800217c <NVIC_Init>:
  /* USER CODE END 3 */
}

// Init NVIC
void NVIC_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2102      	movs	r1, #2
 8002184:	2017      	movs	r0, #23
 8002186:	f7fe f96a 	bl	800045e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800218a:	2017      	movs	r0, #23
 800218c:	f7fe f983 	bl	8000496 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2103      	movs	r1, #3
 8002194:	2028      	movs	r0, #40	; 0x28
 8002196:	f7fe f962 	bl	800045e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800219a:	2028      	movs	r0, #40	; 0x28
 800219c:	f7fe f97b 	bl	8000496 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	201c      	movs	r0, #28
 80021a6:	f7fe f95a 	bl	800045e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021aa:	201c      	movs	r0, #28
 80021ac:	f7fe f973 	bl	8000496 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM3_IRQn,0,0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	201d      	movs	r0, #29
 80021b6:	f7fe f952 	bl	800045e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021ba:	201d      	movs	r0, #29
 80021bc:	f7fe f96b 	bl	8000496 <HAL_NVIC_EnableIRQ>
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b094      	sub	sp, #80	; 0x50
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	2234      	movs	r2, #52	; 0x34
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fb88 	bl	80028e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	4a33      	ldr	r2, [pc, #204]	; (80022bc <SystemClock_Config+0xf8>)
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <SystemClock_Config+0xf8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <SystemClock_Config+0xf8>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <SystemClock_Config+0xfc>)
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <SystemClock_Config+0xfc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <SystemClock_Config+0xfc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002220:	2301      	movs	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002224:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222a:	2302      	movs	r3, #2
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002234:	2304      	movs	r3, #4
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002238:	23b4      	movs	r3, #180	; 0xb4
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800223c:	2302      	movs	r3, #2
 800223e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002240:	2302      	movs	r3, #2
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002244:	2302      	movs	r3, #2
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fe19 	bl	8000e84 <HAL_RCC_OscConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002258:	f000 f974 	bl	8002544 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800225c:	f7fe fb5a 	bl	8000914 <HAL_PWREx_EnableOverDrive>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002266:	f000 f96d 	bl	8002544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226a:	230f      	movs	r3, #15
 800226c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226e:	2302      	movs	r3, #2
 8002270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800227a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800227c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002280:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2105      	movs	r1, #5
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fbad 	bl	80009e8 <HAL_RCC_ClockConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002294:	f000 f956 	bl	8002544 <Error_Handler>
  }

  /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002298:	f7fe fcb8 	bl	8000c0c <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <SystemClock_Config+0x100>)
 80022a0:	fba3 2302 	umull	r2, r3, r3, r2
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f903 	bl	80004b2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80022ac:	2004      	movs	r0, #4
 80022ae:	f7fe f90d 	bl	80004cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}
 80022b2:	bf00      	nop
 80022b4:	3750      	adds	r7, #80	; 0x50
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022dc:	463b      	mov	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <MX_TIM2_Init+0x8c>)
 80022e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM2_Init+0x8c>)
 80022ee:	2208      	movs	r2, #8
 80022f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <MX_TIM2_Init+0x8c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_TIM2_Init+0x8c>)
 80022fa:	2227      	movs	r2, #39	; 0x27
 80022fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM2_Init+0x8c>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002304:	4813      	ldr	r0, [pc, #76]	; (8002354 <MX_TIM2_Init+0x8c>)
 8002306:	f7ff f83f 	bl	8001388 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8002310:	f000 f918 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_TIM2_Init+0x8c>)
 8002322:	f7ff f9da 	bl	80016da <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800232c:	f000 f90a 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM2_Init+0x8c>)
 800233e:	f7ff fc2c 	bl	8001b9a <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002348:	f000 f8fc 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000064 	.word	0x20000064

08002358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	463b      	mov	r3, r7
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM3_Init+0x8c>)
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <MX_TIM3_Init+0x90>)
 8002378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM3_Init+0x8c>)
 800237c:	2208      	movs	r2, #8
 800237e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM3_Init+0x8c>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_TIM3_Init+0x8c>)
 8002388:	2213      	movs	r2, #19
 800238a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM3_Init+0x8c>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <MX_TIM3_Init+0x8c>)
 8002394:	f7fe fff8 	bl	8001388 <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 800239e:	f000 f8d1 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4619      	mov	r1, r3
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <MX_TIM3_Init+0x8c>)
 80023b0:	f7ff f993 	bl	80016da <HAL_TIM_ConfigClockSource>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023ba:	f000 f8c3 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c6:	463b      	mov	r3, r7
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <MX_TIM3_Init+0x8c>)
 80023cc:	f7ff fbe5 	bl	8001b9a <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023d6:	f000 f8b5 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000028 	.word	0x20000028
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_USART2_UART_Init+0x50>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USART2_UART_Init+0x4c>)
 8002424:	f7ff fc12 	bl	8001c4c <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800242e:	f000 f889 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200000a0 	.word	0x200000a0
 800243c:	40004400 	.word	0x40004400

08002440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4a36      	ldr	r2, [pc, #216]	; (8002534 <MX_GPIO_Init+0xf4>)
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <MX_GPIO_Init+0xf4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <MX_GPIO_Init+0xf4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <MX_GPIO_Init+0xf4>)
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <MX_GPIO_Init+0xf4>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <MX_GPIO_Init+0xf4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <MX_GPIO_Init+0xf4>)
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <MX_GPIO_Init+0xf4>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <MX_GPIO_Init+0xf4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <MX_GPIO_Init+0xf4>)
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <MX_GPIO_Init+0xf4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <MX_GPIO_Init+0xf4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2120      	movs	r1, #32
 80024ca:	481b      	ldr	r0, [pc, #108]	; (8002538 <MX_GPIO_Init+0xf8>)
 80024cc:	f7fe f9d2 	bl	8000874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2120      	movs	r1, #32
 80024d4:	4819      	ldr	r0, [pc, #100]	; (800253c <MX_GPIO_Init+0xfc>)
 80024d6:	f7fe f9cd 	bl	8000874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Input_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Input_Pin;
 80024da:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80024de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_GPIO_Init+0x100>)
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	4813      	ldr	r0, [pc, #76]	; (800253c <MX_GPIO_Init+0xfc>)
 80024f0:	f7fe f816 	bl	8000520 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80024f4:	2320      	movs	r3, #32
 80024f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	480b      	ldr	r0, [pc, #44]	; (8002538 <MX_GPIO_Init+0xf8>)
 800250c:	f7fe f808 	bl	8000520 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_Pin */
  GPIO_InitStruct.Pin = Output_Pin;
 8002510:	2320      	movs	r3, #32
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002514:	2301      	movs	r3, #1
 8002516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_GPIO_Init+0xfc>)
 8002528:	f7fd fffa 	bl	8000520 <HAL_GPIO_Init>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020800 	.word	0x40020800
 8002540:	10210000 	.word	0x10210000

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002556:	2003      	movs	r0, #3
 8002558:	f7fd ff76 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2100      	movs	r1, #0
 8002560:	f06f 000b 	mvn.w	r0, #11
 8002564:	f7fd ff7b 	bl	800045e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	f06f 000a 	mvn.w	r0, #10
 8002570:	f7fd ff75 	bl	800045e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	f06f 0009 	mvn.w	r0, #9
 800257c:	f7fd ff6f 	bl	800045e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	f06f 0004 	mvn.w	r0, #4
 8002588:	f7fd ff69 	bl	800045e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	f06f 0003 	mvn.w	r0, #3
 8002594:	f7fd ff63 	bl	800045e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	f06f 0001 	mvn.w	r0, #1
 80025a0:	f7fd ff5d 	bl	800045e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7fd ff57 	bl	800045e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2005      	movs	r0, #5
 80025b6:	f7fd ff52 	bl	800045e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80025ba:	2005      	movs	r0, #5
 80025bc:	f7fd ff6b 	bl	8000496 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_TIM_Base_MspInit+0x64>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025f2:	e012      	b.n	800261a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d10d      	bne.n	800261a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_TIM_Base_MspInit+0x68>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_TIM_Base_MspDeInit+0x44>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d106      	bne.n	8002650 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_TIM_Base_MspDeInit+0x48>)
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_TIM_Base_MspDeInit+0x48>)
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 800264e:	e00a      	b.n	8002666 <HAL_TIM_Base_MspDeInit+0x36>
  else if(htim_base->Instance==TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d105      	bne.n	8002666 <HAL_TIM_Base_MspDeInit+0x36>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_TIM_Base_MspDeInit+0x48>)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_TIM_Base_MspDeInit+0x48>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40010000 	.word	0x40010000
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_UART_MspInit+0x58>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11d      	bne.n	80026ca <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <HAL_UART_MspInit+0x5c>)
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_UART_MspInit+0x5c>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_UART_MspInit+0x5c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026aa:	230c      	movs	r3, #12
 80026ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ba:	2307      	movs	r3, #7
 80026bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_UART_MspInit+0x60>)
 80026c6:	f7fd ff2b 	bl	8000520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004400 	.word	0x40004400
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000

080026e0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f7fd fdbe 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002704:	f7fd fefe 	bl	8000504 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6))
 8002720:	2140      	movs	r1, #64	; 0x40
 8002722:	4807      	ldr	r0, [pc, #28]	; (8002740 <EXTI9_5_IRQHandler+0x24>)
 8002724:	f7fe f88e 	bl	8000844 <HAL_GPIO_ReadPin>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <EXTI9_5_IRQHandler+0x18>
	{
		flagGPIO = 1;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <EXTI9_5_IRQHandler+0x28>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002734:	2040      	movs	r0, #64	; 0x40
 8002736:	f7fe f8c9 	bl	80008cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40020800 	.word	0x40020800
 8002744:	20000020 	.word	0x20000020

08002748 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */

void TIM2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_UPDATE) != RESET)
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <TIM2_IRQHandler+0x2c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <TIM2_IRQHandler+0x22>
	{
		//HAL_GPIO_TogglePin(Output_GPIO_Port, Output_Pin);
		flagTIM2=1;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <TIM2_IRQHandler+0x30>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <TIM2_IRQHandler+0x2c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0201 	mvn.w	r2, #1
 8002768:	611a      	str	r2, [r3, #16]
	}

	HAL_TIM_IRQHandler(&htim2);
 800276a:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM2_IRQHandler+0x2c>)
 800276c:	f7fe fead 	bl	80014ca <HAL_TIM_IRQHandler>

  /* USER CODE END TIM2_IRQn 0 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000064 	.word	0x20000064
 8002778:	20000021 	.word	0x20000021

0800277c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) != RESET)
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <TIM3_IRQHandler+0x2c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <TIM3_IRQHandler+0x22>
	{
		//HAL_GPIO_TogglePin(Output_GPIO_Port, Output_Pin);
		flagTIM3=1;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <TIM3_IRQHandler+0x30>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <TIM3_IRQHandler+0x2c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0201 	mvn.w	r2, #1
 800279c:	611a      	str	r2, [r3, #16]
	}

  HAL_TIM_IRQHandler(&htim3);
 800279e:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM3_IRQHandler+0x2c>)
 80027a0:	f7fe fe93 	bl	80014ca <HAL_TIM_IRQHandler>
  /* USER CODE END TIM3_IRQn 0 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000028 	.word	0x20000028
 80027ac:	20000022 	.word	0x20000022

080027b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80027b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b8:	4807      	ldr	r0, [pc, #28]	; (80027d8 <EXTI15_10_IRQHandler+0x28>)
 80027ba:	f7fe f843 	bl	8000844 <HAL_GPIO_ReadPin>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <EXTI15_10_IRQHandler+0x1a>
	{
		flagGPIO = 1;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <EXTI15_10_IRQHandler+0x2c>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027ce:	f7fe f87d 	bl	80008cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40020800 	.word	0x40020800
 80027dc:	20000020 	.word	0x20000020

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <SystemInit+0x60>)
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <SystemInit+0x60>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <SystemInit+0x64>)
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <SystemInit+0x64>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <SystemInit+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <SystemInit+0x64>)
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <SystemInit+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <SystemInit+0x64>)
 8002818:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <SystemInit+0x68>)
 800281a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <SystemInit+0x64>)
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <SystemInit+0x64>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <SystemInit+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SystemInit+0x60>)
 8002830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002834:	609a      	str	r2, [r3, #8]
#endif
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00
 8002844:	40023800 	.word	0x40023800
 8002848:	24003010 	.word	0x24003010

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002852:	e003      	b.n	800285c <LoopCopyDataInit>

08002854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800285a:	3104      	adds	r1, #4

0800285c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002864:	d3f6      	bcc.n	8002854 <CopyDataInit>
  ldr  r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002868:	e002      	b.n	8002870 <LoopFillZerobss>

0800286a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800286a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800286c:	f842 3b04 	str.w	r3, [r2], #4

08002870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002874:	d3f9      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002876:	f7ff ffb3 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f000 f811 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7ff fc4f 	bl	8002120 <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002888:	08002930 	.word	0x08002930
  ldr  r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002890:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002894:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002898:	20000168 	.word	0x20000168

0800289c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	4e0d      	ldr	r6, [pc, #52]	; (80028d8 <__libc_init_array+0x38>)
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <__libc_init_array+0x3c>)
 80028a6:	1ba4      	subs	r4, r4, r6
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	2500      	movs	r5, #0
 80028ac:	42a5      	cmp	r5, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	4e0b      	ldr	r6, [pc, #44]	; (80028e0 <__libc_init_array+0x40>)
 80028b2:	4c0c      	ldr	r4, [pc, #48]	; (80028e4 <__libc_init_array+0x44>)
 80028b4:	f000 f820 	bl	80028f8 <_init>
 80028b8:	1ba4      	subs	r4, r4, r6
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	2500      	movs	r5, #0
 80028be:	42a5      	cmp	r5, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c8:	4798      	blx	r3
 80028ca:	3501      	adds	r5, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d2:	4798      	blx	r3
 80028d4:	3501      	adds	r5, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	08002928 	.word	0x08002928
 80028dc:	08002928 	.word	0x08002928
 80028e0:	08002928 	.word	0x08002928
 80028e4:	0800292c 	.word	0x0800292c

080028e8 <memset>:
 80028e8:	4402      	add	r2, r0
 80028ea:	4603      	mov	r3, r0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d100      	bne.n	80028f2 <memset+0xa>
 80028f0:	4770      	bx	lr
 80028f2:	f803 1b01 	strb.w	r1, [r3], #1
 80028f6:	e7f9      	b.n	80028ec <memset+0x4>

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
