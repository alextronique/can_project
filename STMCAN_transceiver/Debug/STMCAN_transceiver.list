
STMCAN_transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001584  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001748  08001748  00011748  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d8  20000004  0800176c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  0800176c  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013bb8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026a4  00000000  00000000  00033bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b92  00000000  00000000  00036290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a8  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e00  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000053ae  00000000  00000000  0003e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a1b  00000000  00000000  0004387e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047299  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018ec  00000000  00000000  00047318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001730 	.word	0x08001730

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08001730 	.word	0x08001730

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_InitTick+0x24>)
{
 8000208:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800020a:	6818      	ldr	r0, [r3, #0]
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	fbb0 f0f3 	udiv	r0, r0, r3
 8000214:	f000 f884 	bl	8000320 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000218:	2200      	movs	r2, #0
 800021a:	4621      	mov	r1, r4
 800021c:	f04f 30ff 	mov.w	r0, #4294967295
 8000220:	f000 f83e 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_Init>:
{
 800022c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x30>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000236:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800023e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 f817 	bl	800027c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2000      	movs	r0, #0
 8000250:	f7ff ffd8 	bl	8000204 <HAL_InitTick>
  HAL_MspInit();
 8000254:	f001 f966 	bl	8001524 <HAL_MspInit>
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd08      	pop	{r3, pc}
 800025c:	40023c00 	.word	0x40023c00

08000260 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_IncTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000020 	.word	0x20000020

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000020 	.word	0x20000020

0800027c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	4a07      	ldr	r2, [pc, #28]	; (800029c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800027e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000280:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000284:	041b      	lsls	r3, r3, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800028c:	0200      	lsls	r0, r0, #8
 800028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000292:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000296:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000298:	60d3      	str	r3, [r2, #12]
 800029a:	4770      	bx	lr
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a2:	b530      	push	{r4, r5, lr}
 80002a4:	68dc      	ldr	r4, [r3, #12]
 80002a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	bf28      	it	cs
 80002b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b8:	f04f 0501 	mov.w	r5, #1
 80002bc:	fa05 f303 	lsl.w	r3, r5, r3
 80002c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c4:	bf8c      	ite	hi
 80002c6:	3c03      	subhi	r4, #3
 80002c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ca:	4019      	ands	r1, r3
 80002cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ce:	fa05 f404 	lsl.w	r4, r5, r4
 80002d2:	3c01      	subs	r4, #1
 80002d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	ea42 0201 	orr.w	r2, r2, r1
 80002dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	bfaf      	iteee	ge
 80002e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	f000 000f 	andlt.w	r0, r0, #15
 80002ea:	4b06      	ldrlt	r3, [pc, #24]	; (8000304 <HAL_NVIC_SetPriority+0x64>)
 80002ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	bfa5      	ittet	ge
 80002f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002fc:	bd30      	pop	{r4, r5, pc}
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	e000ed14 	.word	0xe000ed14

08000308 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000308:	0942      	lsrs	r2, r0, #5
 800030a:	2301      	movs	r3, #1
 800030c:	f000 001f 	and.w	r0, r0, #31
 8000310:	fa03 f000 	lsl.w	r0, r3, r0
 8000314:	4b01      	ldr	r3, [pc, #4]	; (800031c <HAL_NVIC_EnableIRQ+0x14>)
 8000316:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800031a:	4770      	bx	lr
 800031c:	e000e100 	.word	0xe000e100

08000320 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000320:	3801      	subs	r0, #1
 8000322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000326:	d20a      	bcs.n	800033e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	21f0      	movs	r1, #240	; 0xf0
 8000330:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e010 	.word	0xe000e010
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000350:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000352:	bf0c      	ite	eq
 8000354:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000358:	f022 0204 	bicne.w	r2, r2, #4
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	4770      	bx	lr
 8000360:	e000e010 	.word	0xe000e010

08000364 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000364:	4770      	bx	lr

08000366 <HAL_SYSTICK_IRQHandler>:
{
 8000366:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000368:	f7ff fffc 	bl	8000364 <HAL_SYSTICK_Callback>
 800036c:	bd08      	pop	{r3, pc}
	...

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000374:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000376:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000378:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800051c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	4a65      	ldr	r2, [pc, #404]	; (8000514 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800037e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000520 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000382:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000384:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000386:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800038c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000390:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000394:	45b6      	cmp	lr, r6
 8000396:	f040 80aa 	bne.w	80004ee <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800039a:	684c      	ldr	r4, [r1, #4]
 800039c:	f024 0710 	bic.w	r7, r4, #16
 80003a0:	2f02      	cmp	r7, #2
 80003a2:	d116      	bne.n	80003d2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80003a4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003a8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ac:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80003b0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003b8:	f04f 0c0f 	mov.w	ip, #15
 80003bc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80003c0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c4:	690d      	ldr	r5, [r1, #16]
 80003c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ca:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80003ce:	f8ca 5020 	str.w	r5, [sl, #32]
 80003d2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003d8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003dc:	fa05 f50a 	lsl.w	r5, r5, sl
 80003e0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ea:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003f6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fa:	d811      	bhi.n	8000420 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80003fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003fe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000402:	68cf      	ldr	r7, [r1, #12]
 8000404:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000408:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800040c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800040e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000410:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000414:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000418:	409f      	lsls	r7, r3
 800041a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800041e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000420:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000422:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000424:	688f      	ldr	r7, [r1, #8]
 8000426:	fa07 f70a 	lsl.w	r7, r7, sl
 800042a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800042c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042e:	00e5      	lsls	r5, r4, #3
 8000430:	d55d      	bpl.n	80004ee <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000432:	f04f 0b00 	mov.w	fp, #0
 8000436:	f8cd b00c 	str.w	fp, [sp, #12]
 800043a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	4d36      	ldr	r5, [pc, #216]	; (8000518 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000440:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000444:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000448:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800044c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000450:	9703      	str	r7, [sp, #12]
 8000452:	9f03      	ldr	r7, [sp, #12]
 8000454:	f023 0703 	bic.w	r7, r3, #3
 8000458:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800045c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000460:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000464:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000468:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800046c:	f04f 0e0f 	mov.w	lr, #15
 8000470:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000476:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800047a:	d03f      	beq.n	80004fc <HAL_GPIO_Init+0x18c>
 800047c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000480:	42a8      	cmp	r0, r5
 8000482:	d03d      	beq.n	8000500 <HAL_GPIO_Init+0x190>
 8000484:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000488:	42a8      	cmp	r0, r5
 800048a:	d03b      	beq.n	8000504 <HAL_GPIO_Init+0x194>
 800048c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000490:	42a8      	cmp	r0, r5
 8000492:	d039      	beq.n	8000508 <HAL_GPIO_Init+0x198>
 8000494:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000498:	42a8      	cmp	r0, r5
 800049a:	d037      	beq.n	800050c <HAL_GPIO_Init+0x19c>
 800049c:	4548      	cmp	r0, r9
 800049e:	d037      	beq.n	8000510 <HAL_GPIO_Init+0x1a0>
 80004a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80004a4:	42a8      	cmp	r0, r5
 80004a6:	bf14      	ite	ne
 80004a8:	2507      	movne	r5, #7
 80004aa:	2506      	moveq	r5, #6
 80004ac:	fa05 f50c 	lsl.w	r5, r5, ip
 80004b0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004b4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004b6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004b8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004be:	bf0c      	ite	eq
 80004c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004c2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004c4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80004c6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004c8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004cc:	bf0c      	ite	eq
 80004ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004d0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004d2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004d4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004da:	bf0c      	ite	eq
 80004dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80004de:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004e0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80004e2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004e4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004e6:	bf54      	ite	pl
 80004e8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80004ea:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004ec:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004ee:	3301      	adds	r3, #1
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	f47f af48 	bne.w	8000386 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004f6:	b005      	add	sp, #20
 80004f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004fc:	465d      	mov	r5, fp
 80004fe:	e7d5      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 8000500:	2501      	movs	r5, #1
 8000502:	e7d3      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 8000504:	2502      	movs	r5, #2
 8000506:	e7d1      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 8000508:	2503      	movs	r5, #3
 800050a:	e7cf      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 800050c:	2504      	movs	r5, #4
 800050e:	e7cd      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 8000510:	2505      	movs	r5, #5
 8000512:	e7cb      	b.n	80004ac <HAL_GPIO_Init+0x13c>
 8000514:	40013c00 	.word	0x40013c00
 8000518:	40020000 	.word	0x40020000
 800051c:	40023800 	.word	0x40023800
 8000520:	40021400 	.word	0x40021400

08000524 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000524:	b10a      	cbz	r2, 800052a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000526:	6181      	str	r1, [r0, #24]
 8000528:	4770      	bx	lr
 800052a:	0409      	lsls	r1, r1, #16
 800052c:	e7fb      	b.n	8000526 <HAL_GPIO_WritePin+0x2>

0800052e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800052e:	6943      	ldr	r3, [r0, #20]
 8000530:	4059      	eors	r1, r3
 8000532:	6141      	str	r1, [r0, #20]
 8000534:	4770      	bx	lr

08000536 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000536:	4770      	bx	lr

08000538 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000538:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000542:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000546:	641a      	str	r2, [r3, #64]	; 0x40
 8000548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000556:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800055a:	fab3 f383 	clz	r3, r3
 800055e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000562:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800056c:	f7ff fe80 	bl	8000270 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000570:	4c16      	ldr	r4, [pc, #88]	; (80005cc <HAL_PWREx_EnableOverDrive+0x94>)
  tickstart = HAL_GetTick();
 8000572:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	03da      	lsls	r2, r3, #15
 8000578:	d515      	bpl.n	80005a6 <HAL_PWREx_EnableOverDrive+0x6e>
 800057a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800057e:	fa93 f3a3 	rbit	r3, r3
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000582:	fab3 f383 	clz	r3, r3
 8000586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800058a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000594:	f7ff fe6c 	bl	8000270 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000598:	4c0c      	ldr	r4, [pc, #48]	; (80005cc <HAL_PWREx_EnableOverDrive+0x94>)
  tickstart = HAL_GetTick();
 800059a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800059c:	6863      	ldr	r3, [r4, #4]
 800059e:	039b      	lsls	r3, r3, #14
 80005a0:	d50a      	bpl.n	80005b8 <HAL_PWREx_EnableOverDrive+0x80>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80005a2:	2000      	movs	r0, #0
 80005a4:	e006      	b.n	80005b4 <HAL_PWREx_EnableOverDrive+0x7c>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80005a6:	f7ff fe63 	bl	8000270 <HAL_GetTick>
 80005aa:	1b40      	subs	r0, r0, r5
 80005ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005b0:	d9e0      	bls.n	8000574 <HAL_PWREx_EnableOverDrive+0x3c>
      return HAL_TIMEOUT;
 80005b2:	2003      	movs	r0, #3
}
 80005b4:	b003      	add	sp, #12
 80005b6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80005b8:	f7ff fe5a 	bl	8000270 <HAL_GetTick>
 80005bc:	1b40      	subs	r0, r0, r5
 80005be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005c2:	d9eb      	bls.n	800059c <HAL_PWREx_EnableOverDrive+0x64>
 80005c4:	e7f5      	b.n	80005b2 <HAL_PWREx_EnableOverDrive+0x7a>
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005d0:	4b56      	ldr	r3, [pc, #344]	; (800072c <HAL_RCC_ClockConfig+0x15c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	f002 020f 	and.w	r2, r2, #15
 80005d8:	428a      	cmp	r2, r1
{
 80005da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005de:	4605      	mov	r5, r0
 80005e0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005e2:	d330      	bcc.n	8000646 <HAL_RCC_ClockConfig+0x76>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80005e4:	682a      	ldr	r2, [r5, #0]
 80005e6:	0794      	lsls	r4, r2, #30
 80005e8:	d437      	bmi.n	800065a <HAL_RCC_ClockConfig+0x8a>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80005ea:	07d0      	lsls	r0, r2, #31
 80005ec:	d43d      	bmi.n	800066a <HAL_RCC_ClockConfig+0x9a>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80005ee:	4b4f      	ldr	r3, [pc, #316]	; (800072c <HAL_RCC_ClockConfig+0x15c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f002 020f 	and.w	r2, r2, #15
 80005f6:	4296      	cmp	r6, r2
 80005f8:	f0c0 8088 	bcc.w	800070c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80005fc:	682a      	ldr	r2, [r5, #0]
 80005fe:	0751      	lsls	r1, r2, #29
 8000600:	f100 808c 	bmi.w	800071c <HAL_RCC_ClockConfig+0x14c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000604:	0713      	lsls	r3, r2, #28
 8000606:	d507      	bpl.n	8000618 <HAL_RCC_ClockConfig+0x48>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000608:	4a49      	ldr	r2, [pc, #292]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800060a:	6929      	ldr	r1, [r5, #16]
 800060c:	6893      	ldr	r3, [r2, #8]
 800060e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000616:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000618:	f000 f8c6 	bl	80007a8 <HAL_RCC_GetSysClockFreq>
 800061c:	4b44      	ldr	r3, [pc, #272]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800061e:	22f0      	movs	r2, #240	; 0xf0
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	fa92 f2a2 	rbit	r2, r2
 8000626:	fab2 f282 	clz	r2, r2
 800062a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800062e:	40d3      	lsrs	r3, r2
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_RCC_ClockConfig+0x164>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	40d8      	lsrs	r0, r3
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <HAL_RCC_ClockConfig+0x168>)
 8000638:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fde2 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 8000640:	2000      	movs	r0, #0
}
 8000642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f003 030f 	and.w	r3, r3, #15
 8000650:	4299      	cmp	r1, r3
 8000652:	d0c7      	beq.n	80005e4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000654:	2001      	movs	r0, #1
 8000656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800065a:	4935      	ldr	r1, [pc, #212]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800065c:	68a8      	ldr	r0, [r5, #8]
 800065e:	688b      	ldr	r3, [r1, #8]
 8000660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000664:	4303      	orrs	r3, r0
 8000666:	608b      	str	r3, [r1, #8]
 8000668:	e7bf      	b.n	80005ea <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800066a:	686a      	ldr	r2, [r5, #4]
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800066e:	2a01      	cmp	r2, #1
 8000670:	d11e      	bne.n	80006b0 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000678:	d0ec      	beq.n	8000654 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800067a:	4c2d      	ldr	r4, [pc, #180]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800067c:	68a3      	ldr	r3, [r4, #8]
 800067e:	f023 0303 	bic.w	r3, r3, #3
 8000682:	4313      	orrs	r3, r2
 8000684:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000686:	f7ff fdf3 	bl	8000270 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800068a:	686b      	ldr	r3, [r5, #4]
 800068c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800068e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000690:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000694:	d116      	bne.n	80006c4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000696:	68a3      	ldr	r3, [r4, #8]
 8000698:	f003 030c 	and.w	r3, r3, #12
 800069c:	2b04      	cmp	r3, #4
 800069e:	d0a6      	beq.n	80005ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006a0:	f7ff fde6 	bl	8000270 <HAL_GetTick>
 80006a4:	1bc0      	subs	r0, r0, r7
 80006a6:	4540      	cmp	r0, r8
 80006a8:	d9f5      	bls.n	8000696 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 80006aa:	2003      	movs	r0, #3
 80006ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80006b0:	1e91      	subs	r1, r2, #2
 80006b2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80006b4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80006b6:	d802      	bhi.n	80006be <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80006b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80006bc:	e7dc      	b.n	8000678 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006be:	f013 0f02 	tst.w	r3, #2
 80006c2:	e7d9      	b.n	8000678 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d10a      	bne.n	80006de <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006c8:	68a3      	ldr	r3, [r4, #8]
 80006ca:	f003 030c 	and.w	r3, r3, #12
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d08d      	beq.n	80005ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006d2:	f7ff fdcd 	bl	8000270 <HAL_GetTick>
 80006d6:	1bc0      	subs	r0, r0, r7
 80006d8:	4540      	cmp	r0, r8
 80006da:	d9f5      	bls.n	80006c8 <HAL_RCC_ClockConfig+0xf8>
 80006dc:	e7e5      	b.n	80006aa <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d10f      	bne.n	8000702 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80006e2:	68a3      	ldr	r3, [r4, #8]
 80006e4:	f003 030c 	and.w	r3, r3, #12
 80006e8:	2b0c      	cmp	r3, #12
 80006ea:	d080      	beq.n	80005ee <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006ec:	f7ff fdc0 	bl	8000270 <HAL_GetTick>
 80006f0:	1bc0      	subs	r0, r0, r7
 80006f2:	4540      	cmp	r0, r8
 80006f4:	d9f5      	bls.n	80006e2 <HAL_RCC_ClockConfig+0x112>
 80006f6:	e7d8      	b.n	80006aa <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006f8:	f7ff fdba 	bl	8000270 <HAL_GetTick>
 80006fc:	1bc0      	subs	r0, r0, r7
 80006fe:	4540      	cmp	r0, r8
 8000700:	d8d3      	bhi.n	80006aa <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000702:	68a3      	ldr	r3, [r4, #8]
 8000704:	f013 0f0c 	tst.w	r3, #12
 8000708:	d1f6      	bne.n	80006f8 <HAL_RCC_ClockConfig+0x128>
 800070a:	e770      	b.n	80005ee <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800070c:	b2f2      	uxtb	r2, r6
 800070e:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	429e      	cmp	r6, r3
 8000718:	d19c      	bne.n	8000654 <HAL_RCC_ClockConfig+0x84>
 800071a:	e76f      	b.n	80005fc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800071c:	4904      	ldr	r1, [pc, #16]	; (8000730 <HAL_RCC_ClockConfig+0x160>)
 800071e:	68e8      	ldr	r0, [r5, #12]
 8000720:	688b      	ldr	r3, [r1, #8]
 8000722:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000726:	4303      	orrs	r3, r0
 8000728:	608b      	str	r3, [r1, #8]
 800072a:	e76b      	b.n	8000604 <HAL_RCC_ClockConfig+0x34>
 800072c:	40023c00 	.word	0x40023c00
 8000730:	40023800 	.word	0x40023800
 8000734:	08001748 	.word	0x08001748
 8000738:	20000000 	.word	0x20000000

0800073c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800073c:	4b01      	ldr	r3, [pc, #4]	; (8000744 <HAL_RCC_GetHCLKFreq+0x8>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000000 	.word	0x20000000

08000748 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_RCC_GetPCLK1Freq+0x24>)
 800074a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	fa92 f2a2 	rbit	r2, r2
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800075c:	40d3      	lsrs	r3, r2
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000764:	6810      	ldr	r0, [r2, #0]
}
 8000766:	40d8      	lsrs	r0, r3
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	08001758 	.word	0x08001758
 8000774:	20000000 	.word	0x20000000

08000778 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_RCC_GetPCLK2Freq+0x24>)
 800077a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	fa92 f2a2 	rbit	r2, r2
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800078c:	40d3      	lsrs	r3, r2
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000790:	5cd3      	ldrb	r3, [r2, r3]
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000794:	6810      	ldr	r0, [r2, #0]
} 
 8000796:	40d8      	lsrs	r0, r3
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	08001758 	.word	0x08001758
 80007a4:	20000000 	.word	0x20000000

080007a8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <HAL_RCC_GetSysClockFreq+0xb0>)
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	f002 020c 	and.w	r2, r2, #12
 80007b0:	2a08      	cmp	r2, #8
 80007b2:	d007      	beq.n	80007c4 <HAL_RCC_GetSysClockFreq+0x1c>
 80007b4:	2a0c      	cmp	r2, #12
 80007b6:	d02c      	beq.n	8000812 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <HAL_RCC_GetSysClockFreq+0xb4>)
 80007ba:	4829      	ldr	r0, [pc, #164]	; (8000860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80007bc:	2a04      	cmp	r2, #4
 80007be:	bf18      	it	ne
 80007c0:	4618      	movne	r0, r3
 80007c2:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007c4:	685a      	ldr	r2, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007c6:	6859      	ldr	r1, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80007c8:	685b      	ldr	r3, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007ca:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007d2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80007d6:	fa91 f0a1 	rbit	r0, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80007da:	fab0 f080 	clz	r0, r0
 80007de:	ea03 0301 	and.w	r3, r3, r1
 80007e2:	fa23 f300 	lsr.w	r3, r3, r0
 80007e6:	bf14      	ite	ne
 80007e8:	481d      	ldrne	r0, [pc, #116]	; (8000860 <HAL_RCC_GetSysClockFreq+0xb8>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80007ea:	481c      	ldreq	r0, [pc, #112]	; (800085c <HAL_RCC_GetSysClockFreq+0xb4>)
 80007ec:	fbb0 f0f2 	udiv	r0, r0, r2
 80007f0:	4358      	muls	r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_RCC_GetSysClockFreq+0xb0>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	fa92 f2a2 	rbit	r2, r2
 80007fe:	fab2 f282 	clz	r2, r2
 8000802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000806:	40d3      	lsrs	r3, r2
 8000808:	3301      	adds	r3, #1
 800080a:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
      
      sysclockfreq = pllvco/pllr;
 800080c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000810:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000812:	685a      	ldr	r2, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000814:	6859      	ldr	r1, [r3, #4]
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000816:	685b      	ldr	r3, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000818:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800081c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000820:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000824:	fa91 f0a1 	rbit	r0, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000828:	fab0 f080 	clz	r0, r0
 800082c:	ea03 0301 	and.w	r3, r3, r1
 8000830:	fa23 f300 	lsr.w	r3, r3, r0
 8000834:	bf14      	ite	ne
 8000836:	480a      	ldrne	r0, [pc, #40]	; (8000860 <HAL_RCC_GetSysClockFreq+0xb8>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000838:	4808      	ldreq	r0, [pc, #32]	; (800085c <HAL_RCC_GetSysClockFreq+0xb4>)
 800083a:	fbb0 f0f2 	udiv	r0, r0, r2
 800083e:	4358      	muls	r0, r3
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000842:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	fa92 f2a2 	rbit	r2, r2
 800084c:	fab2 f282 	clz	r2, r2
 8000850:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000854:	40d3      	lsrs	r3, r2
 8000856:	e7d9      	b.n	800080c <HAL_RCC_GetSysClockFreq+0x64>
 8000858:	40023800 	.word	0x40023800
 800085c:	00f42400 	.word	0x00f42400
 8000860:	007a1200 	.word	0x007a1200

08000864 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000864:	6803      	ldr	r3, [r0, #0]
{
 8000866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	07de      	lsls	r6, r3, #31
{
 800086a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086c:	d43b      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	079d      	lsls	r5, r3, #30
 8000872:	f100 8092 	bmi.w	800099a <HAL_RCC_OscConfig+0x136>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	071e      	lsls	r6, r3, #28
 800087a:	f100 80e6 	bmi.w	8000a4a <HAL_RCC_OscConfig+0x1e6>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	075d      	lsls	r5, r3, #29
 8000882:	d52a      	bpl.n	80008da <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <HAL_RCC_OscConfig+0x288>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800088a:	4d99      	ldr	r5, [pc, #612]	; (8000af0 <HAL_RCC_OscConfig+0x28c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a4:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80008a6:	f7ff fce3 	bl	8000270 <HAL_GetTick>
 80008aa:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	05da      	lsls	r2, r3, #23
 80008b0:	f140 80ed 	bpl.w	8000a8e <HAL_RCC_OscConfig+0x22a>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b4:	68a3      	ldr	r3, [r4, #8]
 80008b6:	4d8d      	ldr	r5, [pc, #564]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	f040 80ef 	bne.w	8000a9c <HAL_RCC_OscConfig+0x238>
 80008be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008c6:	f7ff fcd3 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ca:	4d88      	ldr	r5, [pc, #544]	; (8000aec <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80008cc:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ce:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008d4:	079b      	lsls	r3, r3, #30
 80008d6:	f140 8102 	bpl.w	8000ade <HAL_RCC_OscConfig+0x27a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008da:	69a2      	ldr	r2, [r4, #24]
 80008dc:	2a00      	cmp	r2, #0
 80008de:	f040 810d 	bne.w	8000afc <HAL_RCC_OscConfig+0x298>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80008e2:	2000      	movs	r0, #0
 80008e4:	e01e      	b.n	8000924 <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80008e6:	4b81      	ldr	r3, [pc, #516]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	f002 020c 	and.w	r2, r2, #12
 80008ee:	2a04      	cmp	r2, #4
 80008f0:	d010      	beq.n	8000914 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80008f8:	2a08      	cmp	r2, #8
 80008fa:	d102      	bne.n	8000902 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	0258      	lsls	r0, r3, #9
 8000900:	d408      	bmi.n	8000914 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000902:	4b7a      	ldr	r3, [pc, #488]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800090a:	2a0c      	cmp	r2, #12
 800090c:	d10c      	bne.n	8000928 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	0251      	lsls	r1, r2, #9
 8000912:	d509      	bpl.n	8000928 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000914:	4b75      	ldr	r3, [pc, #468]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	039a      	lsls	r2, r3, #14
 800091a:	d5a8      	bpl.n	800086e <HAL_RCC_OscConfig+0xa>
 800091c:	6863      	ldr	r3, [r4, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1a5      	bne.n	800086e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
}
 8000924:	b003      	add	sp, #12
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000928:	6862      	ldr	r2, [r4, #4]
 800092a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800092e:	d111      	bne.n	8000954 <HAL_RCC_OscConfig+0xf0>
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fc9a 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093c:	4d6b      	ldr	r5, [pc, #428]	; (8000aec <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	039b      	lsls	r3, r3, #14
 8000944:	d493      	bmi.n	800086e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fc93 	bl	8000270 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f7      	bls.n	8000940 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8000950:	2003      	movs	r0, #3
 8000952:	e7e7      	b.n	8000924 <HAL_RCC_OscConfig+0xc0>
 8000954:	4d65      	ldr	r5, [pc, #404]	; (8000aec <HAL_RCC_OscConfig+0x288>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000956:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	d107      	bne.n	800096e <HAL_RCC_OscConfig+0x10a>
 800095e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	e7e4      	b.n	8000938 <HAL_RCC_OscConfig+0xd4>
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800097c:	2a00      	cmp	r2, #0
 800097e:	d1db      	bne.n	8000938 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000980:	f7ff fc76 	bl	8000270 <HAL_GetTick>
 8000984:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	039f      	lsls	r7, r3, #14
 800098a:	f57f af70 	bpl.w	800086e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098e:	f7ff fc6f 	bl	8000270 <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	2864      	cmp	r0, #100	; 0x64
 8000996:	d9f6      	bls.n	8000986 <HAL_RCC_OscConfig+0x122>
 8000998:	e7da      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800099a:	4b54      	ldr	r3, [pc, #336]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	f012 0f0c 	tst.w	r2, #12
 80009a2:	d010      	beq.n	80009c6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009aa:	2a08      	cmp	r2, #8
 80009ac:	d102      	bne.n	80009b4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	0258      	lsls	r0, r3, #9
 80009b2:	d508      	bpl.n	80009c6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b4:	4a4d      	ldr	r2, [pc, #308]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 80009b6:	6893      	ldr	r3, [r2, #8]
 80009b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009bc:	2b0c      	cmp	r3, #12
 80009be:	d116      	bne.n	80009ee <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c0:	6853      	ldr	r3, [r2, #4]
 80009c2:	0259      	lsls	r1, r3, #9
 80009c4:	d413      	bmi.n	80009ee <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <HAL_RCC_OscConfig+0x288>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	0792      	lsls	r2, r2, #30
 80009cc:	d502      	bpl.n	80009d4 <HAL_RCC_OscConfig+0x170>
 80009ce:	68e2      	ldr	r2, [r4, #12]
 80009d0:	2a01      	cmp	r2, #1
 80009d2:	d1a6      	bne.n	8000922 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	22f8      	movs	r2, #248	; 0xf8
 80009d8:	fa92 f2a2 	rbit	r2, r2
 80009dc:	fab2 f182 	clz	r1, r2
 80009e0:	6922      	ldr	r2, [r4, #16]
 80009e2:	408a      	lsls	r2, r1
 80009e4:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ec:	e743      	b.n	8000876 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ee:	68e2      	ldr	r2, [r4, #12]
 80009f0:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <HAL_RCC_OscConfig+0x290>)
 80009f2:	b1da      	cbz	r2, 8000a2c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_ENABLE();
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f8:	f7ff fc3a 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fc:	4d3b      	ldr	r5, [pc, #236]	; (8000aec <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80009fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	079b      	lsls	r3, r3, #30
 8000a04:	d50c      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x1bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a06:	6829      	ldr	r1, [r5, #0]
 8000a08:	23f8      	movs	r3, #248	; 0xf8
 8000a0a:	fa93 f3a3 	rbit	r3, r3
 8000a0e:	fab3 f283 	clz	r2, r3
 8000a12:	6923      	ldr	r3, [r4, #16]
 8000a14:	4093      	lsls	r3, r2
 8000a16:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	602b      	str	r3, [r5, #0]
 8000a1e:	e72a      	b.n	8000876 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fc26 	bl	8000270 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9ea      	bls.n	8000a00 <HAL_RCC_OscConfig+0x19c>
 8000a2a:	e791      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8000a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fc1f 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a32:	4d2e      	ldr	r5, [pc, #184]	; (8000aec <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000a34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	079f      	lsls	r7, r3, #30
 8000a3a:	f57f af1c 	bpl.w	8000876 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fc17 	bl	8000270 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x1d2>
 8000a48:	e782      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a4a:	6962      	ldr	r2, [r4, #20]
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_RCC_OscConfig+0x294>)
 8000a4e:	b17a      	cbz	r2, 8000a70 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_LSI_ENABLE();
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fc0c 	bl	8000270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a58:	4d24      	ldr	r5, [pc, #144]	; (8000aec <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f53f af0d 	bmi.w	800087e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fc04 	bl	8000270 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x1f8>
 8000a6e:	e76f      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8000a70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a72:	f7ff fbfd 	bl	8000270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a76:	4d1d      	ldr	r5, [pc, #116]	; (8000aec <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000a78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	f57f aefe 	bpl.w	800087e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fbf5 	bl	8000270 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9f6      	bls.n	8000a7a <HAL_RCC_OscConfig+0x216>
 8000a8c:	e760      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a8e:	f7ff fbef 	bl	8000270 <HAL_GetTick>
 8000a92:	1b80      	subs	r0, r0, r6
 8000a94:	2802      	cmp	r0, #2
 8000a96:	f67f af09 	bls.w	80008ac <HAL_RCC_OscConfig+0x48>
 8000a9a:	e759      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d104      	bne.n	8000aaa <HAL_RCC_OscConfig+0x246>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
 8000aa8:	e709      	b.n	80008be <HAL_RCC_OscConfig+0x5a>
 8000aaa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab4:	f022 0204 	bic.w	r2, r2, #4
 8000ab8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f47f af03 	bne.w	80008c6 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8000ac0:	f7ff fbd6 	bl	8000270 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ac8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000acc:	0798      	lsls	r0, r3, #30
 8000ace:	f57f af04 	bpl.w	80008da <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fbcd 	bl	8000270 <HAL_GetTick>
 8000ad6:	1b80      	subs	r0, r0, r6
 8000ad8:	42b8      	cmp	r0, r7
 8000ada:	d9f6      	bls.n	8000aca <HAL_RCC_OscConfig+0x266>
 8000adc:	e738      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fbc7 	bl	8000270 <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	42b8      	cmp	r0, r7
 8000ae6:	f67f aef4 	bls.w	80008d2 <HAL_RCC_OscConfig+0x6e>
 8000aea:	e731      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000
 8000af4:	42470000 	.word	0x42470000
 8000af8:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000afc:	4d30      	ldr	r5, [pc, #192]	; (8000bc0 <HAL_RCC_OscConfig+0x35c>)
 8000afe:	68ab      	ldr	r3, [r5, #8]
 8000b00:	f003 030c 	and.w	r3, r3, #12
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	f43f af0c 	beq.w	8000922 <HAL_RCC_OscConfig+0xbe>
 8000b0a:	4e2e      	ldr	r6, [pc, #184]	; (8000bc4 <HAL_RCC_OscConfig+0x360>)
 8000b0c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b0e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b10:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b12:	d148      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x342>
        tickstart = HAL_GetTick();
 8000b14:	f7ff fbac 	bl	8000270 <HAL_GetTick>
 8000b18:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	0199      	lsls	r1, r3, #6
 8000b1e:	d43c      	bmi.n	8000b9a <HAL_RCC_OscConfig+0x336>
 8000b20:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8000b24:	fa9e feae 	rbit	lr, lr
 8000b28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b2c:	fabe fe8e 	clz	lr, lr
 8000b30:	fa92 f2a2 	rbit	r2, r2
 8000b34:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8000b38:	fab2 f782 	clz	r7, r2
 8000b3c:	fa90 f0a0 	rbit	r0, r0
 8000b40:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8000b44:	fab0 f080 	clz	r0, r0
 8000b48:	fa91 f1a1 	rbit	r1, r1
 8000b4c:	6a22      	ldr	r2, [r4, #32]
 8000b4e:	69e3      	ldr	r3, [r4, #28]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b54:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b5c:	0852      	lsrs	r2, r2, #1
 8000b5e:	3a01      	subs	r2, #1
 8000b60:	40ba      	lsls	r2, r7
 8000b62:	4313      	orrs	r3, r2
 8000b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b66:	fa02 f000 	lsl.w	r0, r2, r0
 8000b6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6c:	4c14      	ldr	r4, [pc, #80]	; (8000bc0 <HAL_RCC_OscConfig+0x35c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b6e:	fab1 f181 	clz	r1, r1
 8000b72:	4303      	orrs	r3, r0
 8000b74:	fa02 f101 	lsl.w	r1, r2, r1
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fb76 	bl	8000270 <HAL_GetTick>
 8000b84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	019a      	lsls	r2, r3, #6
 8000b8a:	f53f aeaa 	bmi.w	80008e2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fb6f 	bl	8000270 <HAL_GetTick>
 8000b92:	1b40      	subs	r0, r0, r5
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x322>
 8000b98:	e6da      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9a:	f7ff fb69 	bl	8000270 <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9ba      	bls.n	8000b1a <HAL_RCC_OscConfig+0x2b6>
 8000ba4:	e6d4      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb63 	bl	8000270 <HAL_GetTick>
 8000baa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	019b      	lsls	r3, r3, #6
 8000bb0:	f57f ae97 	bpl.w	80008e2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb4:	f7ff fb5c 	bl	8000270 <HAL_GetTick>
 8000bb8:	1b00      	subs	r0, r0, r4
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d9f6      	bls.n	8000bac <HAL_RCC_OscConfig+0x348>
 8000bbe:	e6c7      	b.n	8000950 <HAL_RCC_OscConfig+0xec>
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	42470060 	.word	0x42470060

08000bc8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bc8:	6803      	ldr	r3, [r0, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	f042 0201 	orr.w	r2, r2, #1
 8000bd0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000bda:	2000      	movs	r0, #0
 8000bdc:	4770      	bx	lr

08000bde <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000bde:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000be2:	2b01      	cmp	r3, #1
{
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000bea:	d01c      	beq.n	8000c26 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000bec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000bf0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000bf8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000bfa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000bfe:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c02:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000c04:	680a      	ldr	r2, [r1, #0]
 8000c06:	2a40      	cmp	r2, #64	; 0x40
 8000c08:	d079      	beq.n	8000cfe <HAL_TIM_ConfigClockSource+0x120>
 8000c0a:	d819      	bhi.n	8000c40 <HAL_TIM_ConfigClockSource+0x62>
 8000c0c:	2a10      	cmp	r2, #16
 8000c0e:	f000 8093 	beq.w	8000d38 <HAL_TIM_ConfigClockSource+0x15a>
 8000c12:	d80a      	bhi.n	8000c2a <HAL_TIM_ConfigClockSource+0x4c>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	f000 8089 	beq.w	8000d2c <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000c26:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8000c28:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000c2a:	2a20      	cmp	r2, #32
 8000c2c:	f000 808a 	beq.w	8000d44 <HAL_TIM_ConfigClockSource+0x166>
 8000c30:	2a30      	cmp	r2, #48	; 0x30
 8000c32:	d1f2      	bne.n	8000c1a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c34:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c3a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000c3e:	e036      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000c40:	2a70      	cmp	r2, #112	; 0x70
 8000c42:	d036      	beq.n	8000cb2 <HAL_TIM_ConfigClockSource+0xd4>
 8000c44:	d81b      	bhi.n	8000c7e <HAL_TIM_ConfigClockSource+0xa0>
 8000c46:	2a50      	cmp	r2, #80	; 0x50
 8000c48:	d042      	beq.n	8000cd0 <HAL_TIM_ConfigClockSource+0xf2>
 8000c4a:	2a60      	cmp	r2, #96	; 0x60
 8000c4c:	d1e5      	bne.n	8000c1a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c4e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000c50:	684d      	ldr	r5, [r1, #4]
 8000c52:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c54:	f024 0410 	bic.w	r4, r4, #16
 8000c58:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c5a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000c5e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000c66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000c6a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000c6e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c70:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c72:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c78:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000c7c:	e017      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000c7e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000c82:	d011      	beq.n	8000ca8 <HAL_TIM_ConfigClockSource+0xca>
 8000c84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c88:	d1c7      	bne.n	8000c1a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c8a:	688a      	ldr	r2, [r1, #8]
 8000c8c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000c8e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c90:	68c9      	ldr	r1, [r1, #12]
 8000c92:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c94:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c9c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c9e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca6:	e002      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	e7b3      	b.n	8000c1a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000cb2:	688a      	ldr	r2, [r1, #8]
 8000cb4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000cb6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000cb8:	68c9      	ldr	r1, [r1, #12]
 8000cba:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000cbc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000cc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cc4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000cc6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000cc8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cca:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000cce:	e7ee      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000cd0:	684c      	ldr	r4, [r1, #4]
 8000cd2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000cd4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cd6:	6a1d      	ldr	r5, [r3, #32]
 8000cd8:	f025 0501 	bic.w	r5, r5, #1
 8000cdc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000cde:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ce0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ce4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ce8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000cec:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000cf0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000cf2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000cf8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000cfc:	e7d7      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000cfe:	684c      	ldr	r4, [r1, #4]
 8000d00:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d02:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d04:	6a1d      	ldr	r5, [r3, #32]
 8000d06:	f025 0501 	bic.w	r5, r5, #1
 8000d0a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000d0c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d16:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000d1a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d1e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d20:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d26:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000d2a:	e7c0      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d32:	f042 0207 	orr.w	r2, r2, #7
 8000d36:	e7ba      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d38:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d3e:	f042 0217 	orr.w	r2, r2, #23
 8000d42:	e7b4      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d44:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d4a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000d4e:	e7ae      	b.n	8000cae <HAL_TIM_ConfigClockSource+0xd0>

08000d50 <HAL_TIM_PeriodElapsedCallback>:
 8000d50:	4770      	bx	lr

08000d52 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d52:	4770      	bx	lr

08000d54 <HAL_TIM_IC_CaptureCallback>:
 8000d54:	4770      	bx	lr

08000d56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d56:	4770      	bx	lr

08000d58 <HAL_TIM_TriggerCallback>:
 8000d58:	4770      	bx	lr

08000d5a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d5a:	6803      	ldr	r3, [r0, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	0791      	lsls	r1, r2, #30
{
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d64:	d50e      	bpl.n	8000d84 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	0792      	lsls	r2, r2, #30
 8000d6a:	d50b      	bpl.n	8000d84 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d6c:	f06f 0202 	mvn.w	r2, #2
 8000d70:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d72:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d74:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d76:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d78:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d7a:	d077      	beq.n	8000e6c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000d7c:	f7ff ffea 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d80:	2300      	movs	r3, #0
 8000d82:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	0750      	lsls	r0, r2, #29
 8000d8a:	d510      	bpl.n	8000dae <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	0751      	lsls	r1, r2, #29
 8000d90:	d50d      	bpl.n	8000dae <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d92:	f06f 0204 	mvn.w	r2, #4
 8000d96:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d98:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d9a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d9c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000da0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000da2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000da4:	d068      	beq.n	8000e78 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000da6:	f7ff ffd5 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000daa:	2300      	movs	r3, #0
 8000dac:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	0712      	lsls	r2, r2, #28
 8000db4:	d50f      	bpl.n	8000dd6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	0710      	lsls	r0, r2, #28
 8000dba:	d50c      	bpl.n	8000dd6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dbc:	f06f 0208 	mvn.w	r2, #8
 8000dc0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dc2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dc4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dc6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dc8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000dca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dcc:	d05a      	beq.n	8000e84 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dce:	f7ff ffc1 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	06d2      	lsls	r2, r2, #27
 8000ddc:	d510      	bpl.n	8000e00 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	06d0      	lsls	r0, r2, #27
 8000de2:	d50d      	bpl.n	8000e00 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000de4:	f06f 0210 	mvn.w	r2, #16
 8000de8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dec:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000df2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000df4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000df6:	d04b      	beq.n	8000e90 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000df8:	f7ff ffac 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	07d1      	lsls	r1, r2, #31
 8000e06:	d508      	bpl.n	8000e1a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	07d2      	lsls	r2, r2, #31
 8000e0c:	d505      	bpl.n	8000e1a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e0e:	f06f 0201 	mvn.w	r2, #1
 8000e12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff ff9b 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	0610      	lsls	r0, r2, #24
 8000e20:	d508      	bpl.n	8000e34 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	0611      	lsls	r1, r2, #24
 8000e26:	d505      	bpl.n	8000e34 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e2c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f000 f8d7 	bl	8000fe2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	0652      	lsls	r2, r2, #25
 8000e3a:	d508      	bpl.n	8000e4e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	0650      	lsls	r0, r2, #25
 8000e40:	d505      	bpl.n	8000e4e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f7ff ff85 	bl	8000d58 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	0691      	lsls	r1, r2, #26
 8000e54:	d522      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	0692      	lsls	r2, r2, #26
 8000e5a:	d51f      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e5c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e62:	611a      	str	r2, [r3, #16]
}
 8000e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e68:	f000 b8ba 	b.w	8000fe0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e6c:	f7ff ff71 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff ff70 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e76:	e783      	b.n	8000d80 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e78:	f7ff ff6b 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ff6a 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e82:	e792      	b.n	8000daa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e84:	f7ff ff65 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ff64 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e8e:	e7a0      	b.n	8000dd2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e90:	f7ff ff5f 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e94:	4620      	mov	r0, r4
 8000e96:	f7ff ff5e 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e9a:	e7af      	b.n	8000dfc <HAL_TIM_IRQHandler+0xa2>
 8000e9c:	bd10      	pop	{r4, pc}
	...

08000ea0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ea0:	4a2e      	ldr	r2, [pc, #184]	; (8000f5c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000ea2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d012      	beq.n	8000ece <TIM_Base_SetConfig+0x2e>
 8000ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eac:	d00f      	beq.n	8000ece <TIM_Base_SetConfig+0x2e>
 8000eae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d00b      	beq.n	8000ece <TIM_Base_SetConfig+0x2e>
 8000eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d007      	beq.n	8000ece <TIM_Base_SetConfig+0x2e>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d003      	beq.n	8000ece <TIM_Base_SetConfig+0x2e>
 8000ec6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d11d      	bne.n	8000f0a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000ece:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ed4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ed6:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <TIM_Base_SetConfig+0xbc>)
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d104      	bne.n	8000ee6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000edc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	e028      	b.n	8000f38 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ee6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eea:	d0f7      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000eec:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <TIM_Base_SetConfig+0xc0>)
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d0f4      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d0f0      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d0ec      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f06:	4290      	cmp	r0, r2
 8000f08:	d0e8      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <TIM_Base_SetConfig+0xc4>)
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	d0e5      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f14:	4290      	cmp	r0, r2
 8000f16:	d0e1      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f1c:	4290      	cmp	r0, r2
 8000f1e:	d0dd      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f20:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f24:	4290      	cmp	r0, r2
 8000f26:	d0d9      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	d0d5      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
 8000f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d0d1      	beq.n	8000edc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000f38:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f3a:	688b      	ldr	r3, [r1, #8]
 8000f3c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f3e:	680b      	ldr	r3, [r1, #0]
 8000f40:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <TIM_Base_SetConfig+0xbc>)
 8000f44:	4298      	cmp	r0, r3
 8000f46:	d006      	beq.n	8000f56 <TIM_Base_SetConfig+0xb6>
 8000f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	d002      	beq.n	8000f56 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000f50:	2301      	movs	r3, #1
 8000f52:	6143      	str	r3, [r0, #20]
}
 8000f54:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f56:	690b      	ldr	r3, [r1, #16]
 8000f58:	6303      	str	r3, [r0, #48]	; 0x30
 8000f5a:	e7f9      	b.n	8000f50 <TIM_Base_SetConfig+0xb0>
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40014000 	.word	0x40014000

08000f68 <HAL_TIM_Base_Init>:
{ 
 8000f68:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	b1a0      	cbz	r0, 8000f98 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f76:	b91b      	cbnz	r3, 8000f80 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f7c:	f000 fb0a 	bl	8001594 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f86:	6820      	ldr	r0, [r4, #0]
 8000f88:	1d21      	adds	r1, r4, #4
 8000f8a:	f7ff ff89 	bl	8000ea0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
 8000f96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
}
 8000f9a:	bd10      	pop	{r4, pc}

08000f9c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000f9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fa0:	2b01      	cmp	r3, #1
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000fa8:	d018      	beq.n	8000fdc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000faa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fae:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fb0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fb2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fb4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fba:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4322      	orrs	r2, r4
 8000fc0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000fdc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <HAL_TIMEx_CommutationCallback>:
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fe2:	4770      	bx	lr

08000fe4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000fe8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000fea:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000fec:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fee:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ff0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ff4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000ff6:	6133      	str	r3, [r6, #16]
{
 8000ff8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ffa:	6883      	ldr	r3, [r0, #8]
 8000ffc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000ffe:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001000:	4303      	orrs	r3, r0
 8001002:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001004:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001008:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800100a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800100e:	430b      	orrs	r3, r1
 8001010:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001012:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001014:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001016:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800101c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800101e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001022:	6173      	str	r3, [r6, #20]
 8001024:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001026:	d17c      	bne.n	8001122 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001028:	429e      	cmp	r6, r3
 800102a:	d003      	beq.n	8001034 <UART_SetConfig+0x50>
 800102c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001030:	429e      	cmp	r6, r3
 8001032:	d144      	bne.n	80010be <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001034:	f7ff fba0 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8001038:	2519      	movs	r5, #25
 800103a:	fb05 f300 	mul.w	r3, r5, r0
 800103e:	6860      	ldr	r0, [r4, #4]
 8001040:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001044:	0040      	lsls	r0, r0, #1
 8001046:	fbb3 f3f0 	udiv	r3, r3, r0
 800104a:	fbb3 f3f9 	udiv	r3, r3, r9
 800104e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001052:	f7ff fb91 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	4368      	muls	r0, r5
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001060:	f7ff fb8a 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	4368      	muls	r0, r5
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fbb0 f3f3 	udiv	r3, r0, r3
 800106e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001072:	fb09 7313 	mls	r3, r9, r3, r7
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	3332      	adds	r3, #50	; 0x32
 800107a:	fbb3 f3f9 	udiv	r3, r3, r9
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001084:	f7ff fb78 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8001088:	6862      	ldr	r2, [r4, #4]
 800108a:	4368      	muls	r0, r5
 800108c:	0052      	lsls	r2, r2, #1
 800108e:	fbb0 faf2 	udiv	sl, r0, r2
 8001092:	f7ff fb71 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	4368      	muls	r0, r5
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010a4:	fb09 a313 	mls	r3, r9, r3, sl
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	3332      	adds	r3, #50	; 0x32
 80010ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010b6:	443b      	add	r3, r7
 80010b8:	60b3      	str	r3, [r6, #8]
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010be:	f7ff fb43 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80010c2:	2519      	movs	r5, #25
 80010c4:	fb05 f300 	mul.w	r3, r5, r0
 80010c8:	6860      	ldr	r0, [r4, #4]
 80010ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010ce:	0040      	lsls	r0, r0, #1
 80010d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010dc:	f7ff fb34 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	4368      	muls	r0, r5
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fbb0 f7f3 	udiv	r7, r0, r3
 80010ea:	f7ff fb2d 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4368      	muls	r0, r5
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fc:	fb09 7313 	mls	r3, r9, r3, r7
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	3332      	adds	r3, #50	; 0x32
 8001104:	fbb3 f3f9 	udiv	r3, r3, r9
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800110e:	f7ff fb1b 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 8001112:	6862      	ldr	r2, [r4, #4]
 8001114:	4368      	muls	r0, r5
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	fbb0 faf2 	udiv	sl, r0, r2
 800111c:	f7ff fb14 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 8001120:	e7b9      	b.n	8001096 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001122:	429e      	cmp	r6, r3
 8001124:	d002      	beq.n	800112c <UART_SetConfig+0x148>
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <UART_SetConfig+0x230>)
 8001128:	429e      	cmp	r6, r3
 800112a:	d140      	bne.n	80011ae <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800112c:	f7ff fb24 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8001130:	6867      	ldr	r7, [r4, #4]
 8001132:	2519      	movs	r5, #25
 8001134:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001138:	fb05 f300 	mul.w	r3, r5, r0
 800113c:	00bf      	lsls	r7, r7, #2
 800113e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001142:	fbb3 f3f9 	udiv	r3, r3, r9
 8001146:	011f      	lsls	r7, r3, #4
 8001148:	f7ff fb16 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	4368      	muls	r0, r5
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	fbb0 f8f3 	udiv	r8, r0, r3
 8001156:	f7ff fb0f 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 800115a:	6863      	ldr	r3, [r4, #4]
 800115c:	4368      	muls	r0, r5
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	fbb0 f3f3 	udiv	r3, r0, r3
 8001164:	fbb3 f3f9 	udiv	r3, r3, r9
 8001168:	fb09 8313 	mls	r3, r9, r3, r8
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	3332      	adds	r3, #50	; 0x32
 8001170:	fbb3 f3f9 	udiv	r3, r3, r9
 8001174:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001178:	f7ff fafe 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 800117c:	6862      	ldr	r2, [r4, #4]
 800117e:	4368      	muls	r0, r5
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	fbb0 faf2 	udiv	sl, r0, r2
 8001186:	f7ff faf7 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800118a:	6863      	ldr	r3, [r4, #4]
 800118c:	4368      	muls	r0, r5
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fbb0 f3f3 	udiv	r3, r0, r3
 8001194:	fbb3 f3f9 	udiv	r3, r3, r9
 8001198:	fb09 a313 	mls	r3, r9, r3, sl
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	3332      	adds	r3, #50	; 0x32
 80011a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	ea43 0308 	orr.w	r3, r3, r8
 80011ac:	e783      	b.n	80010b6 <UART_SetConfig+0xd2>
 80011ae:	f7ff facb 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80011b2:	6867      	ldr	r7, [r4, #4]
 80011b4:	2519      	movs	r5, #25
 80011b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011ba:	fb05 f300 	mul.w	r3, r5, r0
 80011be:	00bf      	lsls	r7, r7, #2
 80011c0:	fbb3 f3f7 	udiv	r3, r3, r7
 80011c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011c8:	011f      	lsls	r7, r3, #4
 80011ca:	f7ff fabd 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	4368      	muls	r0, r5
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fbb0 f8f3 	udiv	r8, r0, r3
 80011d8:	f7ff fab6 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	4368      	muls	r0, r5
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80011ea:	fb09 8313 	mls	r3, r9, r3, r8
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	3332      	adds	r3, #50	; 0x32
 80011f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80011fa:	f7ff faa5 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 80011fe:	6862      	ldr	r2, [r4, #4]
 8001200:	4368      	muls	r0, r5
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	fbb0 faf2 	udiv	sl, r0, r2
 8001208:	f7ff fa9e 	bl	8000748 <HAL_RCC_GetPCLK1Freq>
 800120c:	e7bd      	b.n	800118a <UART_SetConfig+0x1a6>
 800120e:	bf00      	nop
 8001210:	40011000 	.word	0x40011000
 8001214:	40011400 	.word	0x40011400

08001218 <HAL_UART_Init>:
{
 8001218:	b510      	push	{r4, lr}
  if(huart == NULL)
 800121a:	4604      	mov	r4, r0
 800121c:	b340      	cbz	r0, 8001270 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800121e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001222:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001226:	b91b      	cbnz	r3, 8001230 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001228:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800122c:	f000 f9da 	bl	80015e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001230:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001232:	2324      	movs	r3, #36	; 0x24
 8001234:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001238:	68d3      	ldr	r3, [r2, #12]
 800123a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800123e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fecf 	bl	8000fe4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800124e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001256:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800125e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001260:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001262:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001264:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001266:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800126a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800126e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bd10      	pop	{r4, pc}

08001274 <EXTI9_5_IRQHandler>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void EXTI9_5_IRQHandler (void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <EXTI9_5_IRQHandler+0x14>)
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	0652      	lsls	r2, r2, #25
 800127a:	d503      	bpl.n	8001284 <EXTI9_5_IRQHandler+0x10>
	{
		// Lancer TIM1
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800127c:	2040      	movs	r0, #64	; 0x40
 800127e:	6158      	str	r0, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_6);
 8001280:	f7ff b959 	b.w	8000536 <HAL_GPIO_EXTI_Callback>
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40013c00 	.word	0x40013c00

0800128c <TIM1_UP_TIM10_IRQHandler>:
	}
}

void TIM1_UP_TIM10_IRQHandler(void)
{
 800128c:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim1);
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001290:	f7ff fd63 	bl	8000d5a <HAL_TIM_IRQHandler>
	HAL_GPIO_TogglePin(Output_GPIO_Port, Output_Pin);
 8001294:	2120      	movs	r1, #32
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <TIM1_UP_TIM10_IRQHandler+0x18>)
}
 8001298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(Output_GPIO_Port, Output_Pin);
 800129c:	f7ff b947 	b.w	800052e <HAL_GPIO_TogglePin>
 80012a0:	20000024 	.word	0x20000024
 80012a4:	40020800 	.word	0x40020800

080012a8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80012a8:	b530      	push	{r4, r5, lr}
 80012aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <SystemClock_Config+0xb0>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	9100      	str	r1, [sp, #0]
 80012b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <SystemClock_Config+0xb4>)
 80012c6:	9101      	str	r1, [sp, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012da:	2301      	movs	r3, #1
 80012dc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012e2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012ee:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012f6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012fa:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f7ff fab1 	bl	8000864 <HAL_RCC_OscConfig>
 8001302:	b100      	cbz	r0, 8001306 <SystemClock_Config+0x5e>
 8001304:	e7fe      	b.n	8001304 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001306:	f7ff f917 	bl	8000538 <HAL_PWREx_EnableOverDrive>
 800130a:	b100      	cbz	r0, 800130e <SystemClock_Config+0x66>
 800130c:	e7fe      	b.n	800130c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001318:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001320:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001324:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001326:	f7ff f953 	bl	80005d0 <HAL_RCC_ClockConfig>
 800132a:	4604      	mov	r4, r0
 800132c:	b100      	cbz	r0, 8001330 <SystemClock_Config+0x88>
 800132e:	e7fe      	b.n	800132e <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001330:	f7ff fa04 	bl	800073c <HAL_RCC_GetHCLKFreq>
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	fbb0 f0f3 	udiv	r0, r0, r3
 800133c:	f7fe fff0 	bl	8000320 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001340:	4628      	mov	r0, r5
 8001342:	f7ff f803 	bl	800034c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001346:	4622      	mov	r2, r4
 8001348:	4621      	mov	r1, r4
 800134a:	f04f 30ff 	mov.w	r0, #4294967295
 800134e:	f7fe ffa7 	bl	80002a0 <HAL_NVIC_SetPriority>
}
 8001352:	b015      	add	sp, #84	; 0x54
 8001354:	bd30      	pop	{r4, r5, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <NVIC_Init>:

/* USER CODE BEGIN 4 */

// Init NVIC
void NVIC_Init(void)
{
 8001360:	b508      	push	{r3, lr}
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,0,0);
 8001362:	2200      	movs	r2, #0
 8001364:	4611      	mov	r1, r2
 8001366:	2017      	movs	r0, #23
 8001368:	f7fe ff9a 	bl	80002a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800136c:	2017      	movs	r0, #23
 800136e:	f7fe ffcb 	bl	8000308 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn,0,0);
 8001372:	2200      	movs	r2, #0
 8001374:	2019      	movs	r0, #25
 8001376:	4611      	mov	r1, r2
 8001378:	f7fe ff92 	bl	80002a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800137c:	2019      	movs	r0, #25
}
 800137e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001382:	f7fe bfc1 	b.w	8000308 <HAL_NVIC_EnableIRQ>
	...

08001388 <main>:
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	2400      	movs	r4, #0
  HAL_Init();
 800138e:	f7fe ff4d 	bl	800022c <HAL_Init>
  SystemClock_Config();
 8001392:	f7ff ff89 	bl	80012a8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <main+0x174>)
 8001398:	9401      	str	r4, [sp, #4]
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139c:	4858      	ldr	r0, [pc, #352]	; (8001500 <main+0x178>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f002 0204 	and.w	r2, r2, #4
 80013aa:	9201      	str	r2, [sp, #4]
 80013ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	9402      	str	r4, [sp, #8]
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013be:	9202      	str	r2, [sp, #8]
 80013c0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	9403      	str	r4, [sp, #12]
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ce:	f002 0201 	and.w	r2, r2, #1
 80013d2:	9203      	str	r2, [sp, #12]
 80013d4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	9404      	str	r4, [sp, #16]
 80013d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013e8:	4622      	mov	r2, r4
 80013ea:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ee:	f7ff f899 	bl	8000524 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, GPIO_PIN_RESET);
 80013f2:	4622      	mov	r2, r4
 80013f4:	2120      	movs	r1, #32
 80013f6:	4843      	ldr	r0, [pc, #268]	; (8001504 <main+0x17c>)
 80013f8:	f7ff f894 	bl	8000524 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001402:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <main+0x180>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001406:	483f      	ldr	r0, [pc, #252]	; (8001504 <main+0x17c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LD2_Pin;
 800140c:	2620      	movs	r6, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001410:	f7fe ffae 	bl	8000370 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001414:	a907      	add	r1, sp, #28
 8001416:	483a      	ldr	r0, [pc, #232]	; (8001500 <main+0x178>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = LD2_Pin;
 800141a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001420:	f7fe ffa6 	bl	8000370 <HAL_GPIO_Init>
  HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 8001424:	a907      	add	r1, sp, #28
 8001426:	4837      	ldr	r0, [pc, #220]	; (8001504 <main+0x17c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = Output_Pin;
 800142a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 8001430:	f7fe ff9e 	bl	8000370 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Input_Pin;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(Input_GPIO_Port, &GPIO_InitStruct);
 8001438:	4832      	ldr	r0, [pc, #200]	; (8001504 <main+0x17c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <main+0x184>)
  htim1.Instance = TIM1;
 800143c:	4d34      	ldr	r5, [pc, #208]	; (8001510 <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(Input_GPIO_Port, &GPIO_InitStruct);
 8001440:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Input_GPIO_Port, &GPIO_InitStruct);
 8001444:	f7fe ff94 	bl	8000370 <HAL_GPIO_Init>
  htim1.Init.Prescaler = 50000;
 8001448:	4832      	ldr	r0, [pc, #200]	; (8001514 <main+0x18c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 50000;
 800144c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001450:	e885 0009 	stmia.w	r5, {r0, r3}
  htim1.Init.Period = 100;
 8001454:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001456:	4628      	mov	r0, r5
  htim1.Init.Period = 100;
 8001458:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800145c:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145e:	f7ff fd83 	bl	8000f68 <HAL_TIM_Base_Init>
 8001462:	b100      	cbz	r0, 8001466 <main+0xde>
 8001464:	e7fe      	b.n	8001464 <main+0xdc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146a:	a907      	add	r1, sp, #28
 800146c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001470:	f7ff fbb5 	bl	8000bde <HAL_TIM_ConfigClockSource>
 8001474:	b100      	cbz	r0, 8001478 <main+0xf0>
 8001476:	e7fe      	b.n	8001476 <main+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147c:	a905      	add	r1, sp, #20
 800147e:	4628      	mov	r0, r5
 8001480:	f7ff fd8c 	bl	8000f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	b100      	cbz	r0, 8001488 <main+0x100>
 8001486:	e7fe      	b.n	8001486 <main+0xfe>
  htim2.Instance = TIM2;
 8001488:	4c23      	ldr	r4, [pc, #140]	; (8001518 <main+0x190>)
 800148a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 800148e:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 0;
 8001492:	60e0      	str	r0, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001496:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001498:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149a:	f7ff fd65 	bl	8000f68 <HAL_TIM_Base_Init>
 800149e:	b100      	cbz	r0, 80014a2 <main+0x11a>
 80014a0:	e7fe      	b.n	80014a0 <main+0x118>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a2:	a907      	add	r1, sp, #28
 80014a4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a8:	f7ff fb99 	bl	8000bde <HAL_TIM_ConfigClockSource>
 80014ac:	b100      	cbz	r0, 80014b0 <main+0x128>
 80014ae:	e7fe      	b.n	80014ae <main+0x126>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b4:	a905      	add	r1, sp, #20
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fd70 	bl	8000f9c <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	b100      	cbz	r0, 80014c0 <main+0x138>
 80014be:	e7fe      	b.n	80014be <main+0x136>
  huart2.Instance = USART2;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <main+0x194>)
  huart2.Init.BaudRate = 115200;
 80014c2:	4917      	ldr	r1, [pc, #92]	; (8001520 <main+0x198>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c4:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 80014c6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ca:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ce:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d0:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d2:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d4:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d6:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d8:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014da:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014dc:	f7ff fe9c 	bl	8001218 <HAL_UART_Init>
 80014e0:	b100      	cbz	r0, 80014e4 <main+0x15c>
 80014e2:	e7fe      	b.n	80014e2 <main+0x15a>
  NVIC_Init();
 80014e4:	f7ff ff3c 	bl	8001360 <NVIC_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80014e8:	4628      	mov	r0, r5
 80014ea:	f7ff fb6d 	bl	8000bc8 <HAL_TIM_Base_Start_IT>
{
 80014ee:	23c8      	movs	r3, #200	; 0xc8
 80014f0:	3b01      	subs	r3, #1
	  for(uint8_t i=0;i<200;i++);
 80014f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80014f6:	d1fb      	bne.n	80014f0 <main+0x168>
 80014f8:	e7f9      	b.n	80014ee <main+0x166>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020800 	.word	0x40020800
 8001508:	10210000 	.word	0x10210000
 800150c:	10110000 	.word	0x10110000
 8001510:	20000024 	.word	0x20000024
 8001514:	40010000 	.word	0x40010000
 8001518:	20000060 	.word	0x20000060
 800151c:	2000009c 	.word	0x2000009c
 8001520:	40004400 	.word	0x40004400

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f7fe fea8 	bl	800027c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	4611      	mov	r1, r2
 8001530:	f06f 000b 	mvn.w	r0, #11
 8001534:	f7fe feb4 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	4611      	mov	r1, r2
 800153c:	f06f 000a 	mvn.w	r0, #10
 8001540:	f7fe feae 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	4611      	mov	r1, r2
 8001548:	f06f 0009 	mvn.w	r0, #9
 800154c:	f7fe fea8 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	4611      	mov	r1, r2
 8001554:	f06f 0004 	mvn.w	r0, #4
 8001558:	f7fe fea2 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	4611      	mov	r1, r2
 8001560:	f06f 0003 	mvn.w	r0, #3
 8001564:	f7fe fe9c 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	4611      	mov	r1, r2
 800156c:	f06f 0001 	mvn.w	r0, #1
 8001570:	f7fe fe96 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	4611      	mov	r1, r2
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7fe fe90 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2005      	movs	r0, #5
 8001584:	4611      	mov	r1, r2
 8001586:	f7fe fe8b 	bl	80002a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800158a:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001590:	f7fe beba 	b.w	8000308 <HAL_NVIC_EnableIRQ>

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_TIM_Base_MspInit+0x48>)
 8001598:	4293      	cmp	r3, r2
{
 800159a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800159c:	d10d      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_TIM_Base_MspInit+0x4c>)
 80015a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b6:	b002      	add	sp, #8
 80015b8:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 80015ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015be:	d1fa      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_TIM_Base_MspInit+0x4c>)
 80015c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	9b01      	ldr	r3, [sp, #4]
}
 80015d8:	e7ed      	b.n	80015b6 <HAL_TIM_Base_MspInit+0x22>
 80015da:	bf00      	nop
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80015e6:	6802      	ldr	r2, [r0, #0]
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_UART_MspInit+0x44>)
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d119      	bne.n	8001622 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001608:	230c      	movs	r3, #12
 800160a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f7fe fea7 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001622:	b007      	add	sp, #28
 8001624:	f85d fb04 	ldr.w	pc, [sp], #4
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <SVC_Handler>:
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f7fe fe11 	bl	8000260 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001642:	f7fe be90 	b.w	8000366 <HAL_SYSTICK_IRQHandler>

08001646 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8001646:	4770      	bx	lr

08001648 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <SystemInit+0x40>)
 800164a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800164e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <SystemInit+0x44>)
 8001658:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800165a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001662:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800166a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800166e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <SystemInit+0x48>)
 8001672:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800167a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800167c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800167e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00
 800168c:	40023800 	.word	0x40023800
 8001690:	24003010 	.word	0x24003010

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001698:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800169a:	e003      	b.n	80016a4 <LoopCopyDataInit>

0800169c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800169e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016a2:	3104      	adds	r1, #4

080016a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016ac:	d3f6      	bcc.n	800169c <CopyDataInit>
  ldr  r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b0:	e002      	b.n	80016b8 <LoopFillZerobss>

080016b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016b4:	f842 3b04 	str.w	r3, [r2], #4

080016b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016bc:	d3f9      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016be:	f7ff ffc3 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f000 f811 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff fe5f 	bl	8001388 <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016d0:	08001768 	.word	0x08001768
  ldr  r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016d8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80016dc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80016e0:	200000dc 	.word	0x200000dc

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>
	...

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	4e0d      	ldr	r6, [pc, #52]	; (8001720 <__libc_init_array+0x38>)
 80016ec:	4c0d      	ldr	r4, [pc, #52]	; (8001724 <__libc_init_array+0x3c>)
 80016ee:	1ba4      	subs	r4, r4, r6
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	2500      	movs	r5, #0
 80016f4:	42a5      	cmp	r5, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	4e0b      	ldr	r6, [pc, #44]	; (8001728 <__libc_init_array+0x40>)
 80016fa:	4c0c      	ldr	r4, [pc, #48]	; (800172c <__libc_init_array+0x44>)
 80016fc:	f000 f818 	bl	8001730 <_init>
 8001700:	1ba4      	subs	r4, r4, r6
 8001702:	10a4      	asrs	r4, r4, #2
 8001704:	2500      	movs	r5, #0
 8001706:	42a5      	cmp	r5, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001710:	4798      	blx	r3
 8001712:	3501      	adds	r5, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800171a:	4798      	blx	r3
 800171c:	3501      	adds	r5, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08001760 	.word	0x08001760
 8001724:	08001760 	.word	0x08001760
 8001728:	08001760 	.word	0x08001760
 800172c:	08001764 	.word	0x08001764

08001730 <_init>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr

0800173c <_fini>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	bf00      	nop
 8001740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001742:	bc08      	pop	{r3}
 8001744:	469e      	mov	lr, r3
 8001746:	4770      	bx	lr
